
Diploma.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000153a  000015ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000153a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800108  00800108  000015d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029dc  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f8  00000000  00000000  000042d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001757  00000000  00000000  000054cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000788  00000000  00000000  00006c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000947  00000000  00000000  000073ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002506  00000000  00000000  00007cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000a1f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	30 02       	muls	r19, r16
      6a:	49 02       	muls	r20, r25
      6c:	62 02       	muls	r22, r18
      6e:	7b 02       	muls	r23, r27
      70:	94 02       	muls	r25, r20
      72:	ad 02       	muls	r26, r29
      74:	c6 02       	muls	r28, r22
      76:	08 4a       	sbci	r16, 0xA8	; 168
      78:	d7 3b       	cpi	r29, 0xB7	; 183
      7a:	3b ce       	rjmp	.-906    	; 0xfffffcf2 <__eeprom_end+0xff7efcf2>
      7c:	01 6e       	ori	r16, 0xE1	; 225
      7e:	84 bc       	out	0x24, r8	; 36
      80:	bf fd       	.word	0xfdbf	; ????
      82:	c1 2f       	mov	r28, r17
      84:	3d 6c       	ori	r19, 0xCD	; 205
      86:	74 31       	cpi	r23, 0x14	; 20
      88:	9a bd       	out	0x2a, r25	; 42
      8a:	56 83       	std	Z+6, r21	; 0x06
      8c:	3d da       	rcall	.-2950   	; 0xfffff508 <__eeprom_end+0xff7ef508>
      8e:	3d 00       	.word	0x003d	; ????
      90:	c7 7f       	andi	r28, 0xF7	; 247
      92:	11 be       	out	0x31, r1	; 49
      94:	d9 e4       	ldi	r29, 0x49	; 73
      96:	bb 4c       	sbci	r27, 0xCB	; 203
      98:	3e 91       	ld	r19, -X
      9a:	6b aa       	std	Y+51, r6	; 0x33
      9c:	aa be       	out	0x3a, r10	; 58
      9e:	00 00       	nop
      a0:	00 80       	ld	r0, Z
      a2:	3f 00       	.word	0x003f	; ????

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d8 e0       	ldi	r29, 0x08	; 8
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea e3       	ldi	r30, 0x3A	; 58
      b8:	f5 e1       	ldi	r31, 0x15	; 21
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a8 30       	cpi	r26, 0x08	; 8
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a8 e0       	ldi	r26, 0x08	; 8
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	aa 31       	cpi	r26, 0x1A	; 26
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <main>
      da:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setupTimer0>:
	 {
		 if (error_buff[i] != 0)
		 return (0);
	 }
	 return (1);
 }
      e2:	84 b5       	in	r24, 0x24	; 36
      e4:	82 60       	ori	r24, 0x02	; 2
      e6:	84 bd       	out	0x24, r24	; 36
      e8:	ee e6       	ldi	r30, 0x6E	; 110
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	82 60       	ori	r24, 0x02	; 2
      f0:	80 83       	st	Z, r24
      f2:	89 ef       	ldi	r24, 0xF9	; 249
      f4:	87 bd       	out	0x27, r24	; 39
      f6:	08 95       	ret

000000f8 <startTimer0>:
      f8:	85 b5       	in	r24, 0x25	; 37
      fa:	83 60       	ori	r24, 0x03	; 3
      fc:	85 bd       	out	0x25, r24	; 37
      fe:	08 95       	ret

00000100 <stopTimer0>:
     100:	85 b5       	in	r24, 0x25	; 37
     102:	8c 7f       	andi	r24, 0xFC	; 252
     104:	85 bd       	out	0x25, r24	; 37
     106:	08 95       	ret

00000108 <__vector_14>:
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	8f 93       	push	r24
     114:	9f 93       	push	r25
     116:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     11a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     124:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     128:	9f 91       	pop	r25
     12a:	8f 91       	pop	r24
     12c:	0f 90       	pop	r0
     12e:	0f be       	out	0x3f, r0	; 63
     130:	0f 90       	pop	r0
     132:	1f 90       	pop	r1
     134:	18 95       	reti

00000136 <getPIDdelay>:
     136:	4f 92       	push	r4
     138:	5f 92       	push	r5
     13a:	6f 92       	push	r6
     13c:	7f 92       	push	r7
     13e:	8f 92       	push	r8
     140:	9f 92       	push	r9
     142:	af 92       	push	r10
     144:	bf 92       	push	r11
     146:	cf 92       	push	r12
     148:	df 92       	push	r13
     14a:	ef 92       	push	r14
     14c:	ff 92       	push	r15
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	ec 01       	movw	r28, r24
     154:	6b 01       	movw	r12, r22
     156:	7a 01       	movw	r14, r20
     158:	fa 01       	movw	r30, r20
     15a:	80 80       	ld	r8, Z
     15c:	91 80       	ldd	r9, Z+1	; 0x01
     15e:	a2 80       	ldd	r10, Z+2	; 0x02
     160:	b3 80       	ldd	r11, Z+3	; 0x03
     162:	81 e1       	ldi	r24, 0x11	; 17
     164:	8c 9f       	mul	r24, r28
     166:	b0 01       	movw	r22, r0
     168:	8d 9f       	mul	r24, r29
     16a:	70 0d       	add	r23, r0
     16c:	11 24       	eor	r1, r1
     16e:	07 2e       	mov	r0, r23
     170:	00 0c       	add	r0, r0
     172:	88 0b       	sbc	r24, r24
     174:	99 0b       	sbc	r25, r25
     176:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
     17a:	2b 01       	movw	r4, r22
     17c:	3c 01       	movw	r6, r24
     17e:	ce 01       	movw	r24, r28
     180:	04 96       	adiw	r24, 0x04	; 4
     182:	09 97       	sbiw	r24, 0x09	; 9
     184:	c8 f4       	brcc	.+50     	; 0x1b8 <getPIDdelay+0x82>
     186:	20 97       	sbiw	r28, 0x00	; 0
     188:	d9 f0       	breq	.+54     	; 0x1c0 <getPIDdelay+0x8a>
     18a:	be 01       	movw	r22, r28
     18c:	0d 2e       	mov	r0, r29
     18e:	00 0c       	add	r0, r0
     190:	88 0b       	sbc	r24, r24
     192:	99 0b       	sbc	r25, r25
     194:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
     198:	a5 01       	movw	r20, r10
     19a:	94 01       	movw	r18, r8
     19c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     1a0:	4b 01       	movw	r8, r22
     1a2:	5c 01       	movw	r10, r24
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	40 ec       	ldi	r20, 0xC0	; 192
     1aa:	50 e4       	ldi	r21, 0x40	; 64
     1ac:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__gesf2>
     1b0:	18 16       	cp	r1, r24
     1b2:	0c f4       	brge	.+2      	; 0x1b6 <getPIDdelay+0x80>
     1b4:	6c c0       	rjmp	.+216    	; 0x28e <getPIDdelay+0x158>
     1b6:	60 c0       	rjmp	.+192    	; 0x278 <getPIDdelay+0x142>
     1b8:	81 2c       	mov	r8, r1
     1ba:	91 2c       	mov	r9, r1
     1bc:	54 01       	movw	r10, r8
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <getPIDdelay+0x90>
     1c0:	81 2c       	mov	r8, r1
     1c2:	91 2c       	mov	r9, r1
     1c4:	54 01       	movw	r10, r8
     1c6:	f7 01       	movw	r30, r14
     1c8:	80 82       	st	Z, r8
     1ca:	91 82       	std	Z+1, r9	; 0x01
     1cc:	a2 82       	std	Z+2, r10	; 0x02
     1ce:	b3 82       	std	Z+3, r11	; 0x03
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	40 e4       	ldi	r20, 0x40	; 64
     1d6:	50 e4       	ldi	r21, 0x40	; 64
     1d8:	c5 01       	movw	r24, r10
     1da:	b4 01       	movw	r22, r8
     1dc:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3>
     1e0:	4b 01       	movw	r8, r22
     1e2:	5c 01       	movw	r10, r24
     1e4:	20 97       	sbiw	r28, 0x00	; 0
     1e6:	59 f0       	breq	.+22     	; 0x1fe <getPIDdelay+0xc8>
     1e8:	cc 19       	sub	r28, r12
     1ea:	dd 09       	sbc	r29, r13
     1ec:	be 01       	movw	r22, r28
     1ee:	dd 0f       	add	r29, r29
     1f0:	88 0b       	sbc	r24, r24
     1f2:	99 0b       	sbc	r25, r25
     1f4:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
     1f8:	6b 01       	movw	r12, r22
     1fa:	7c 01       	movw	r14, r24
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <getPIDdelay+0xce>
     1fe:	c1 2c       	mov	r12, r1
     200:	d1 2c       	mov	r13, r1
     202:	76 01       	movw	r14, r12
     204:	a5 01       	movw	r20, r10
     206:	94 01       	movw	r18, r8
     208:	c3 01       	movw	r24, r6
     20a:	b2 01       	movw	r22, r4
     20c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     210:	a7 01       	movw	r20, r14
     212:	96 01       	movw	r18, r12
     214:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24
     21c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fixsfsi>
     220:	6d 32       	cpi	r22, 0x2D	; 45
     222:	f1 e0       	ldi	r31, 0x01	; 1
     224:	7f 07       	cpc	r23, r31
     226:	6c f4       	brge	.+26     	; 0x242 <getPIDdelay+0x10c>
     228:	64 3d       	cpi	r22, 0xD4	; 212
     22a:	7e 4f       	sbci	r23, 0xFE	; 254
     22c:	0c f0       	brlt	.+2      	; 0x230 <getPIDdelay+0xfa>
     22e:	41 c0       	rjmp	.+130    	; 0x2b2 <getPIDdelay+0x17c>
     230:	0f 2e       	mov	r0, r31
     232:	c1 2c       	mov	r12, r1
     234:	d1 2c       	mov	r13, r1
     236:	f6 e9       	ldi	r31, 0x96	; 150
     238:	ef 2e       	mov	r14, r31
     23a:	f3 ec       	ldi	r31, 0xC3	; 195
     23c:	ff 2e       	mov	r15, r31
     23e:	f0 2d       	mov	r31, r0
     240:	38 c0       	rjmp	.+112    	; 0x2b2 <getPIDdelay+0x17c>
     242:	0f 2e       	mov	r0, r31
     244:	c1 2c       	mov	r12, r1
     246:	d1 2c       	mov	r13, r1
     248:	f6 e9       	ldi	r31, 0x96	; 150
     24a:	ef 2e       	mov	r14, r31
     24c:	f3 e4       	ldi	r31, 0x43	; 67
     24e:	ff 2e       	mov	r15, r31
     250:	f0 2d       	mov	r31, r0
     252:	2f c0       	rjmp	.+94     	; 0x2b2 <getPIDdelay+0x17c>
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	a0 ec       	ldi	r26, 0xC0	; 192
     25a:	b0 ec       	ldi	r27, 0xC0	; 192
     25c:	f7 01       	movw	r30, r14
     25e:	80 83       	st	Z, r24
     260:	91 83       	std	Z+1, r25	; 0x01
     262:	a2 83       	std	Z+2, r26	; 0x02
     264:	b3 83       	std	Z+3, r27	; 0x03
     266:	0f 2e       	mov	r0, r31
     268:	81 2c       	mov	r8, r1
     26a:	91 2c       	mov	r9, r1
     26c:	f0 e9       	ldi	r31, 0x90	; 144
     26e:	af 2e       	mov	r10, r31
     270:	f1 ec       	ldi	r31, 0xC1	; 193
     272:	bf 2e       	mov	r11, r31
     274:	f0 2d       	mov	r31, r0
     276:	b8 cf       	rjmp	.-144    	; 0x1e8 <getPIDdelay+0xb2>
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 ec       	ldi	r20, 0xC0	; 192
     27e:	50 ec       	ldi	r21, 0xC0	; 192
     280:	c5 01       	movw	r24, r10
     282:	b4 01       	movw	r22, r8
     284:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__cmpsf2>
     288:	88 23       	and	r24, r24
     28a:	24 f3       	brlt	.-56     	; 0x254 <getPIDdelay+0x11e>
     28c:	9c cf       	rjmp	.-200    	; 0x1c6 <getPIDdelay+0x90>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	a0 ec       	ldi	r26, 0xC0	; 192
     294:	b0 e4       	ldi	r27, 0x40	; 64
     296:	f7 01       	movw	r30, r14
     298:	80 83       	st	Z, r24
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	a2 83       	std	Z+2, r26	; 0x02
     29e:	b3 83       	std	Z+3, r27	; 0x03
     2a0:	0f 2e       	mov	r0, r31
     2a2:	81 2c       	mov	r8, r1
     2a4:	91 2c       	mov	r9, r1
     2a6:	f0 e9       	ldi	r31, 0x90	; 144
     2a8:	af 2e       	mov	r10, r31
     2aa:	f1 e4       	ldi	r31, 0x41	; 65
     2ac:	bf 2e       	mov	r11, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	9b cf       	rjmp	.-202    	; 0x1e8 <getPIDdelay+0xb2>
     2b2:	c7 01       	movw	r24, r14
     2b4:	b6 01       	movw	r22, r12
     2b6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fixsfsi>
     2ba:	cb 01       	movw	r24, r22
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	bf 90       	pop	r11
     2ca:	af 90       	pop	r10
     2cc:	9f 90       	pop	r9
     2ce:	8f 90       	pop	r8
     2d0:	7f 90       	pop	r7
     2d2:	6f 90       	pop	r6
     2d4:	5f 90       	pop	r5
     2d6:	4f 90       	pop	r4
     2d8:	08 95       	ret

000002da <Servo_Step_New>:
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ec 01       	movw	r28, r24
     2e0:	99 23       	and	r25, r25
     2e2:	44 f4       	brge	.+16     	; 0x2f4 <Servo_Step_New+0x1a>
     2e4:	84 e6       	ldi	r24, 0x64	; 100
     2e6:	95 e0       	ldi	r25, 0x05	; 5
     2e8:	0e 94 e5 06 	call	0xdca	; 0xdca <Servo_set_rotation>
     2ec:	d1 95       	neg	r29
     2ee:	c1 95       	neg	r28
     2f0:	d1 09       	sbc	r29, r1
     2f2:	04 c0       	rjmp	.+8      	; 0x2fc <Servo_Step_New+0x22>
     2f4:	88 e1       	ldi	r24, 0x18	; 24
     2f6:	96 e0       	ldi	r25, 0x06	; 6
     2f8:	0e 94 e5 06 	call	0xdca	; 0xdca <Servo_set_rotation>
     2fc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
     300:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
     304:	0e 94 7c 00 	call	0xf8	; 0xf8 <startTimer0>
     308:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     30c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     310:	8c 17       	cp	r24, r28
     312:	9d 07       	cpc	r25, r29
     314:	c8 f3       	brcs	.-14     	; 0x308 <Servo_Step_New+0x2e>
     316:	0e 94 80 00 	call	0x100	; 0x100 <stopTimer0>
     31a:	8c ed       	ldi	r24, 0xDC	; 220
     31c:	95 e0       	ldi	r25, 0x05	; 5
     31e:	0e 94 e5 06 	call	0xdca	; 0xdca <Servo_set_rotation>
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <setAngle>:

 void setAngle(int angle)
 {
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	00 d0       	rcall	.+0      	; 0x33a <setAngle+0x12>
     33a:	00 d0       	rcall	.+0      	; 0x33c <setAngle+0x14>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	6c 01       	movw	r12, r24
	int error = 0;
	int prev_error = 0;
	double errorI = 0;
     342:	19 82       	std	Y+1, r1	; 0x01
     344:	1a 82       	std	Y+2, r1	; 0x02
     346:	1b 82       	std	Y+3, r1	; 0x03
     348:	1c 82       	std	Y+4, r1	; 0x04
	 return (1);
 }

 void setAngle(int angle)
 {
	int error = 0;
     34a:	e1 2c       	mov	r14, r1
     34c:	f1 2c       	mov	r15, r1
     34e:	03 c0       	rjmp	.+6      	; 0x356 <setAngle+0x2e>
     350:	78 01       	movw	r14, r16
     352:	01 c0       	rjmp	.+2      	; 0x356 <setAngle+0x2e>
     354:	78 01       	movw	r14, r16

	//initBuff(error_buff, ERROR_DIM);
	do
	{
		 //Wake up the MPU
		 MPU_Power_Up();
     356:	0e 94 63 03 	call	0x6c6	; 0x6c6 <MPU_Power_Up>
		current_angle = MPU_filter_double_axis(NR_MEASUREMENTS);
     35a:	8a e0       	ldi	r24, 0x0A	; 10
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 34 04 	call	0x868	; 0x868 <MPU_filter_double_axis>
     362:	8c 01       	movw	r16, r24
		MPU_Power_Down();
     364:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MPU_Power_Down>
	 Servo_set_rotation(SERVO_STOP);
 }

 int getError(int sp, int pv)
 {
	 return (sp - pv);
     368:	c6 01       	movw	r24, r12
     36a:	80 1b       	sub	r24, r16
     36c:	91 0b       	sbc	r25, r17
     36e:	8c 01       	movw	r16, r24
		current_angle = MPU_filter_double_axis(NR_MEASUREMENTS);
		MPU_Power_Down();
		prev_error = error;
		error = getError(angle, current_angle);
		//insertError(error_buff, error, &pos);
		delayPID = getPIDdelay(error, prev_error, &errorI);
     370:	ae 01       	movw	r20, r28
     372:	4f 5f       	subi	r20, 0xFF	; 255
     374:	5f 4f       	sbci	r21, 0xFF	; 255
     376:	b7 01       	movw	r22, r14
     378:	0e 94 9b 00 	call	0x136	; 0x136 <getPIDdelay>
		Servo_Step_New(delayPID);
     37c:	0e 94 6d 01 	call	0x2da	; 0x2da <Servo_Step_New>
	} while (error != 0 || prev_error != 0);
     380:	01 15       	cp	r16, r1
     382:	11 05       	cpc	r17, r1
     384:	29 f7       	brne	.-54     	; 0x350 <setAngle+0x28>
     386:	ef 28       	or	r14, r15
     388:	29 f7       	brne	.-54     	; 0x354 <setAngle+0x2c>

     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	08 95       	ret

000003a4 <LIDAR_write_data_to_register>:
#include "LIDAR_LITE_V3.h"

//writes the 8-bit data to one of the registers
void LIDAR_write_data_to_register(unsigned int addr, unsigned int data)
{
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	8c 01       	movw	r16, r24
     3ae:	eb 01       	movw	r28, r22
	//start the I2C communication
	I2C_start_condition();
     3b0:	0e 94 67 07 	call	0xece	; 0xece <I2C_start_condition>
	//send the sensor address for writing purpose
	I2C_sensor_addr_write(LIDAR_WRITE);
     3b4:	84 ec       	ldi	r24, 0xC4	; 196
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 7c 07 	call	0xef8	; 0xef8 <I2C_sensor_addr_write>
	//send the selected register address to the slave
	I2C_send_register_address(addr);
     3bc:	c8 01       	movw	r24, r16
     3be:	0e 94 96 07 	call	0xf2c	; 0xf2c <I2C_send_register_address>
	//send data to the selected register
	I2C_data_write(data);
     3c2:	ce 01       	movw	r24, r28
     3c4:	0e 94 a3 07 	call	0xf46	; 0xf46 <I2C_data_write>
	//stop the communication
	I2C_stop_condition();
     3c8:	0e 94 72 07 	call	0xee4	; 0xee4 <I2C_stop_condition>
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <LIDAR_read_data_from_register>:

//returns the 8-bit data from one of the registers
unsigned int LIDAR_read_data_from_register(unsigned int addr)
{
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
	unsigned int data;

	//start the I2C communication
	I2C_start_condition();
     3dc:	0e 94 67 07 	call	0xece	; 0xece <I2C_start_condition>
	//send the sensor address for writing purpose
	I2C_sensor_addr_write(LIDAR_WRITE);
     3e0:	84 ec       	ldi	r24, 0xC4	; 196
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 7c 07 	call	0xef8	; 0xef8 <I2C_sensor_addr_write>
	//send the selected register address to the slave
	I2C_send_register_address(addr);
     3e8:	ce 01       	movw	r24, r28
     3ea:	0e 94 96 07 	call	0xf2c	; 0xf2c <I2C_send_register_address>
	//stop the communication
	I2C_stop_condition();
     3ee:	0e 94 72 07 	call	0xee4	; 0xee4 <I2C_stop_condition>

	//start the I2C communication
	I2C_start_condition();
     3f2:	0e 94 67 07 	call	0xece	; 0xece <I2C_start_condition>
	//send the sensor address for writing purpose
	I2C_sensor_addr_read(LIDAR_READ);
     3f6:	85 ec       	ldi	r24, 0xC5	; 197
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 89 07 	call	0xf12	; 0xf12 <I2C_sensor_addr_read>
	//read one byte from the slave
	data = I2C_read_byte();
     3fe:	0e 94 b0 07 	call	0xf60	; 0xf60 <I2C_read_byte>
     402:	ec 01       	movw	r28, r24
	//stop the communication
	I2C_stop_condition();
     404:	0e 94 72 07 	call	0xee4	; 0xee4 <I2C_stop_condition>

	return (data);
}
     408:	ce 01       	movw	r24, r28
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <LIDAR_distance_measurement>:

//returns the distance in centimeters
unsigned int LIDAR_distance_measurement(void)
{
     410:	cf 93       	push	r28
	unsigned int data;
	unsigned int distanceH;
	unsigned int distanceL;

	//Write the acquisition command to the ACQ_COMMAND register
	LIDAR_write_data_to_register(ACQ_COMMAND, 0x04);
     412:	64 e0       	ldi	r22, 0x04	; 4
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
	do 
	{
		//monitor the first bit of the status register, to know when the measurement is done
		data = LIDAR_read_data_from_register(STATUS_REG);
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LIDAR_read_data_from_register>
	} while ((data & 0x01));
     426:	80 fd       	sbrc	r24, 0
     428:	fa cf       	rjmp	.-12     	; 0x41e <LIDAR_distance_measurement+0xe>
	//extract the HIGH byte of the measurement
	distanceH = LIDAR_read_data_from_register(FULL_DELAY_HIGH);
     42a:	8f e0       	ldi	r24, 0x0F	; 15
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LIDAR_read_data_from_register>
     432:	c8 2f       	mov	r28, r24
	//extract the LOW byte of the measurement
	distanceL = LIDAR_read_data_from_register(FULL_DELAY_LOW);
     434:	80 e1       	ldi	r24, 0x10	; 16
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LIDAR_read_data_from_register>

	//put together the high byte and the low byte
	distanceH = distanceH << 8;
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	3c 2f       	mov	r19, r28
	distanceH = distanceH + distanceL;

	//return the result
	return (distanceH);
}
     442:	82 0f       	add	r24, r18
     444:	93 1f       	adc	r25, r19
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <LIDAR_configuration>:
	algorithm, and uses a threshold value for high sensitivity and noise.
	5: Low sensitivity detection. Overrides default valid measurement detection
	algorithm, and uses a threshold value for low sensitivity and noise.
*/
void LIDAR_configuration(unsigned int mode)
{
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
	unsigned int i;

	switch (mode)
     44e:	87 30       	cpi	r24, 0x07	; 7
     450:	91 05       	cpc	r25, r1
     452:	08 f0       	brcs	.+2      	; 0x456 <LIDAR_configuration+0xc>
     454:	b9 c0       	rjmp	.+370    	; 0x5c8 <LIDAR_configuration+0x17e>
     456:	fc 01       	movw	r30, r24
     458:	ec 5c       	subi	r30, 0xCC	; 204
     45a:	ff 4f       	sbci	r31, 0xFF	; 255
     45c:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__tablejump2__>
	{
		 case 0: // Default mode, balanced performance
		 LIDAR_write_data_to_register(SIG_COUNT_VAL,0x80); // Default
     460:	60 e8       	ldi	r22, 0x80	; 128
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(ACQ_CONFIG_REG,0x08); // Default
     46c:	68 e0       	ldi	r22, 0x08	; 8
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	84 e0       	ldi	r24, 0x04	; 4
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(THRESHOLD_BYPASS,0x00); // Default
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	8c e1       	ldi	r24, 0x1C	; 28
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(OUTER_LOOP_COUNT, 0x01); //Default
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	81 e1       	ldi	r24, 0x11	; 17
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 break;
     490:	9b c0       	rjmp	.+310    	; 0x5c8 <LIDAR_configuration+0x17e>

		 case 1: // Short range, high speed
		 LIDAR_write_data_to_register(SIG_COUNT_VAL,0x1d);
     492:	6d e1       	ldi	r22, 0x1D	; 29
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(ACQ_CONFIG_REG,0x08); // Default
     49e:	68 e0       	ldi	r22, 0x08	; 8
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(THRESHOLD_BYPASS,0x00); // Default
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	8c e1       	ldi	r24, 0x1C	; 28
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(OUTER_LOOP_COUNT, 0x01); //Default
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	81 e1       	ldi	r24, 0x11	; 17
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 break;
     4c2:	82 c0       	rjmp	.+260    	; 0x5c8 <LIDAR_configuration+0x17e>

		 case 2: // Default range, higher speed short range
		 LIDAR_write_data_to_register(SIG_COUNT_VAL,0x80); // Default
     4c4:	60 e8       	ldi	r22, 0x80	; 128
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(ACQ_CONFIG_REG,0x00);
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(THRESHOLD_BYPASS,0x00); // Default
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	8c e1       	ldi	r24, 0x1C	; 28
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(OUTER_LOOP_COUNT, 0x01); //Default
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	81 e1       	ldi	r24, 0x11	; 17
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 break;
     4f4:	69 c0       	rjmp	.+210    	; 0x5c8 <LIDAR_configuration+0x17e>

		 case 3: // Maximum range
		 LIDAR_write_data_to_register(SIG_COUNT_VAL,0xff);
     4f6:	6f ef       	ldi	r22, 0xFF	; 255
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(ACQ_CONFIG_REG,0x08); // Default
     502:	68 e0       	ldi	r22, 0x08	; 8
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	84 e0       	ldi	r24, 0x04	; 4
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(THRESHOLD_BYPASS,0x00); // Default
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	8c e1       	ldi	r24, 0x1C	; 28
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(OUTER_LOOP_COUNT, 0x01); //Default
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	81 e1       	ldi	r24, 0x11	; 17
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 break;
     526:	50 c0       	rjmp	.+160    	; 0x5c8 <LIDAR_configuration+0x17e>

		 case 4: // High sensitivity detection, high erroneous measurements
		 LIDAR_write_data_to_register(SIG_COUNT_VAL,0x80); // Default
     528:	60 e8       	ldi	r22, 0x80	; 128
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(ACQ_CONFIG_REG,0x08); // Default
     534:	68 e0       	ldi	r22, 0x08	; 8
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	84 e0       	ldi	r24, 0x04	; 4
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(THRESHOLD_BYPASS,0x80);
     540:	60 e8       	ldi	r22, 0x80	; 128
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	8c e1       	ldi	r24, 0x1C	; 28
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(OUTER_LOOP_COUNT, 0x01); //Default
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	81 e1       	ldi	r24, 0x11	; 17
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 break;
     558:	37 c0       	rjmp	.+110    	; 0x5c8 <LIDAR_configuration+0x17e>

		 case 5: // Low sensitivity detection, low erroneous measurements
		 LIDAR_write_data_to_register(SIG_COUNT_VAL,0x80); // Default
     55a:	60 e8       	ldi	r22, 0x80	; 128
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(ACQ_CONFIG_REG,0x08); // Default
     566:	68 e0       	ldi	r22, 0x08	; 8
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	84 e0       	ldi	r24, 0x04	; 4
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(THRESHOLD_BYPASS,0xb0);
     572:	60 eb       	ldi	r22, 0xB0	; 176
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8c e1       	ldi	r24, 0x1C	; 28
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(OUTER_LOOP_COUNT, 0x01); //Default
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	81 e1       	ldi	r24, 0x11	; 17
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 break;
     58a:	1e c0       	rjmp	.+60     	; 0x5c8 <LIDAR_configuration+0x17e>

		 case 6: //Burst measurements with the nr. of measurements = 0xFE
		 LIDAR_write_data_to_register(SIG_COUNT_VAL,0xff);
     58c:	6f ef       	ldi	r22, 0xFF	; 255
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(ACQ_CONFIG_REG,0x28);
     598:	68 e2       	ldi	r22, 0x28	; 40
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	84 e0       	ldi	r24, 0x04	; 4
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(THRESHOLD_BYPASS,0x00); // Default
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	8c e1       	ldi	r24, 0x1C	; 28
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(OUTER_LOOP_COUNT, 0xFE);
     5b0:	6e ef       	ldi	r22, 0xFE	; 254
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	81 e1       	ldi	r24, 0x11	; 17
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
		 LIDAR_write_data_to_register(MEASURE_DELAY, 0X14);//100 Hz frequency
     5bc:	64 e1       	ldi	r22, 0x14	; 20
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	85 e4       	ldi	r24, 0x45	; 69
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LIDAR_write_data_to_register>
	algorithm, and uses a threshold value for high sensitivity and noise.
	5: Low sensitivity detection. Overrides default valid measurement detection
	algorithm, and uses a threshold value for low sensitivity and noise.
*/
void LIDAR_configuration(unsigned int mode)
{
     5c8:	c2 e3       	ldi	r28, 0x32	; 50
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
		 LIDAR_write_data_to_register(OUTER_LOOP_COUNT, 0xFE);
		 LIDAR_write_data_to_register(MEASURE_DELAY, 0X14);//100 Hz frequency
		 break;
	}
	for (i = 0; i < 50; i++)
		LIDAR_distance_measurement();
     5cc:	0e 94 08 02 	call	0x410	; 0x410 <LIDAR_distance_measurement>
     5d0:	21 97       	sbiw	r28, 0x01	; 1
		 LIDAR_write_data_to_register(THRESHOLD_BYPASS,0x00); // Default
		 LIDAR_write_data_to_register(OUTER_LOOP_COUNT, 0xFE);
		 LIDAR_write_data_to_register(MEASURE_DELAY, 0X14);//100 Hz frequency
		 break;
	}
	for (i = 0; i < 50; i++)
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <LIDAR_configuration+0x182>
		LIDAR_distance_measurement();
}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <Setup>:
	}
}

void Setup(void)
{
	I2c_init();
     5da:	0e 94 5e 07 	call	0xebc	; 0xebc <I2c_init>
	LIDAR_configuration(0);
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 25 02 	call	0x44a	; 0x44a <LIDAR_configuration>
	Serial_setup();
     5e6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <Serial_setup>
	Stepper_Setup_Ports();
     5ea:	0e 94 f2 06 	call	0xde4	; 0xde4 <Stepper_Setup_Ports>
	Servo_setup();
     5ee:	0e 94 d1 06 	call	0xda2	; 0xda2 <Servo_setup>
	MPU_Power_Down();
     5f2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MPU_Power_Down>
	setupTimer0();
     5f6:	0e 94 71 00 	call	0xe2	; 0xe2 <setupTimer0>
	sei();
     5fa:	78 94       	sei
     5fc:	08 95       	ret

000005fe <main>:
#include "Scan.h"

void Setup(void);

int main(void)
{
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	00 d0       	rcall	.+0      	; 0x604 <main+0x6>
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
	unsigned char stepvar = 0;
     608:	19 82       	std	Y+1, r1	; 0x01
	unsigned char dir = 0;
     60a:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char receive = 0;

	Setup();
     60c:	0e 94 ed 02 	call	0x5da	; 0x5da <Setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     610:	2f ef       	ldi	r18, 0xFF	; 255
     612:	83 ed       	ldi	r24, 0xD3	; 211
     614:	90 e3       	ldi	r25, 0x30	; 48
     616:	21 50       	subi	r18, 0x01	; 1
     618:	80 40       	sbci	r24, 0x00	; 0
     61a:	90 40       	sbci	r25, 0x00	; 0
     61c:	e1 f7       	brne	.-8      	; 0x616 <main+0x18>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <main+0x22>
     620:	00 00       	nop

int main(void)
{
	unsigned char stepvar = 0;
	unsigned char dir = 0;
	unsigned char receive = 0;
     622:	80 e0       	ldi	r24, 0x00	; 0
		}
		if (receive == START_SCAN){
			Scan_XY(&dir, &stepvar);
		}
		
		receive = 0;
     624:	10 e0       	ldi	r17, 0x00	; 0
     626:	04 c0       	rjmp	.+8      	; 0x630 <main+0x32>
	_delay_ms(1000);
    while (1) 
    {
		while (receive != START_SCAN && receive != SET_PARAMS)
		{
			receive = Serial_read_char();
     628:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Serial_read_char>
     62c:	01 c0       	rjmp	.+2      	; 0x630 <main+0x32>
		}
		if (receive == START_SCAN){
			Scan_XY(&dir, &stepvar);
		}
		
		receive = 0;
     62e:	81 2f       	mov	r24, r17

	Setup();
	_delay_ms(1000);
    while (1) 
    {
		while (receive != START_SCAN && receive != SET_PARAMS)
     630:	92 e8       	ldi	r25, 0x82	; 130
     632:	98 0f       	add	r25, r24
     634:	92 30       	cpi	r25, 0x02	; 2
     636:	c0 f7       	brcc	.-16     	; 0x628 <main+0x2a>
		{
			receive = Serial_read_char();
		}
		if (receive == SET_PARAMS){
     638:	8e 37       	cpi	r24, 0x7E	; 126
     63a:	21 f4       	brne	.+8      	; 0x644 <main+0x46>
			set_params();
     63c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_params>
		}
		if (receive == START_SCAN){
			Scan_XY(&dir, &stepvar);
		}
		
		receive = 0;
     640:	81 2f       	mov	r24, r17
     642:	f6 cf       	rjmp	.-20     	; 0x630 <main+0x32>
			receive = Serial_read_char();
		}
		if (receive == SET_PARAMS){
			set_params();
		}
		if (receive == START_SCAN){
     644:	8f 37       	cpi	r24, 0x7F	; 127
     646:	99 f7       	brne	.-26     	; 0x62e <main+0x30>
			Scan_XY(&dir, &stepvar);
     648:	be 01       	movw	r22, r28
     64a:	6f 5f       	subi	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	ce 01       	movw	r24, r28
     650:	02 96       	adiw	r24, 0x02	; 2
     652:	0e 94 73 05 	call	0xae6	; 0xae6 <Scan_XY>
		}
		
		receive = 0;
     656:	81 2f       	mov	r24, r17
     658:	eb cf       	rjmp	.-42     	; 0x630 <main+0x32>

0000065a <MPU_write_data_to_register>:
	//transform the angle from radians to degrees
	angle = (angle * 180.0) / PI;

	//return the result as an integer approximation
	return ((int)(angle));
 }
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	8c 01       	movw	r16, r24
     664:	eb 01       	movw	r28, r22
     666:	0e 94 67 07 	call	0xece	; 0xece <I2C_start_condition>
     66a:	80 ed       	ldi	r24, 0xD0	; 208
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 7c 07 	call	0xef8	; 0xef8 <I2C_sensor_addr_write>
     672:	c8 01       	movw	r24, r16
     674:	0e 94 96 07 	call	0xf2c	; 0xf2c <I2C_send_register_address>
     678:	ce 01       	movw	r24, r28
     67a:	0e 94 a3 07 	call	0xf46	; 0xf46 <I2C_data_write>
     67e:	0e 94 72 07 	call	0xee4	; 0xee4 <I2C_stop_condition>
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <MPU_read_data_from_register>:
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	ec 01       	movw	r28, r24
     692:	0e 94 67 07 	call	0xece	; 0xece <I2C_start_condition>
     696:	80 ed       	ldi	r24, 0xD0	; 208
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 7c 07 	call	0xef8	; 0xef8 <I2C_sensor_addr_write>
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 96 07 	call	0xf2c	; 0xf2c <I2C_send_register_address>
     6a4:	0e 94 72 07 	call	0xee4	; 0xee4 <I2C_stop_condition>
     6a8:	0e 94 67 07 	call	0xece	; 0xece <I2C_start_condition>
     6ac:	81 ed       	ldi	r24, 0xD1	; 209
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 89 07 	call	0xf12	; 0xf12 <I2C_sensor_addr_read>
     6b4:	0e 94 b0 07 	call	0xf60	; 0xf60 <I2C_read_byte>
     6b8:	ec 01       	movw	r28, r24
     6ba:	0e 94 72 07 	call	0xee4	; 0xee4 <I2C_stop_condition>
     6be:	ce 01       	movw	r24, r28
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <MPU_Power_Up>:
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	8b e6       	ldi	r24, 0x6B	; 107
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 2d 03 	call	0x65a	; 0x65a <MPU_write_data_to_register>
     6d2:	2f ef       	ldi	r18, 0xFF	; 255
     6d4:	86 e7       	ldi	r24, 0x76	; 118
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	21 50       	subi	r18, 0x01	; 1
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	90 40       	sbci	r25, 0x00	; 0
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <MPU_Power_Up+0x12>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <MPU_Power_Up+0x1c>
     6e2:	00 00       	nop
     6e4:	08 95       	ret

000006e6 <MPU_Power_Down>:
     6e6:	60 e4       	ldi	r22, 0x40	; 64
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	8b e6       	ldi	r24, 0x6B	; 107
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 2d 03 	call	0x65a	; 0x65a <MPU_write_data_to_register>
     6f2:	08 95       	ret

000006f4 <MPU_data_acq>:
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
     6fe:	16 2f       	mov	r17, r22
     700:	0e 94 46 03 	call	0x68c	; 0x68c <MPU_read_data_from_register>
     704:	08 2f       	mov	r16, r24
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	0e 94 46 03 	call	0x68c	; 0x68c <MPU_read_data_from_register>
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	70 2f       	mov	r23, r16
     714:	86 0f       	add	r24, r22
     716:	97 1f       	adc	r25, r23
     718:	11 11       	cpse	r17, r1
     71a:	0d c0       	rjmp	.+26     	; 0x736 <MPU_data_acq+0x42>
     71c:	bc 01       	movw	r22, r24
     71e:	99 0f       	add	r25, r25
     720:	88 0b       	sbc	r24, r24
     722:	99 0b       	sbc	r25, r25
     724:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	43 e0       	ldi	r20, 0x03	; 3
     72e:	53 e4       	ldi	r21, 0x43	; 67
     730:	0e 94 5f 08 	call	0x10be	; 0x10be <__divsf3>
     734:	12 c0       	rjmp	.+36     	; 0x75a <MPU_data_acq+0x66>
     736:	11 30       	cpi	r17, 0x01	; 1
     738:	69 f4       	brne	.+26     	; 0x754 <MPU_data_acq+0x60>
     73a:	bc 01       	movw	r22, r24
     73c:	99 0f       	add	r25, r25
     73e:	88 0b       	sbc	r24, r24
     740:	99 0b       	sbc	r25, r25
     742:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	5a e3       	ldi	r21, 0x3A	; 58
     74e:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3>
     752:	03 c0       	rjmp	.+6      	; 0x75a <MPU_data_acq+0x66>
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	cb 01       	movw	r24, r22
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	08 95       	ret

00000764 <MPU_double_axis_angle>:

 //returns the inclination angle using two axis
 int MPU_double_axis_angle(unsigned int addr1, unsigned int addr2)
 {
     764:	4f 92       	push	r4
     766:	5f 92       	push	r5
     768:	6f 92       	push	r6
     76a:	7f 92       	push	r7
     76c:	8f 92       	push	r8
     76e:	9f 92       	push	r9
     770:	af 92       	push	r10
     772:	bf 92       	push	r11
     774:	cf 92       	push	r12
     776:	df 92       	push	r13
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	5b 01       	movw	r10, r22
	double accel1, accel2, angle;

	//acceleration from the first axis
	accel1 = MPU_data_acq(addr1, 1);
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MPU_data_acq>
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
	//acceleration from the second axis
	accel2 = MPU_data_acq(addr2, 1);
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	c5 01       	movw	r24, r10
     78c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MPU_data_acq>
     790:	4b 01       	movw	r8, r22
     792:	5c 01       	movw	r10, r24
	//calculate inclination angle based on 2 axes
	angle = atan(accel1/ accel2);
     794:	9b 01       	movw	r18, r22
     796:	ac 01       	movw	r20, r24
     798:	c7 01       	movw	r24, r14
     79a:	b6 01       	movw	r22, r12
     79c:	0e 94 5f 08 	call	0x10be	; 0x10be <__divsf3>
     7a0:	0e 94 2b 08 	call	0x1056	; 0x1056 <atan>
	//transform the angle from radians to degrees
	angle = (angle * 180.0) / PI;
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	44 e3       	ldi	r20, 0x34	; 52
     7aa:	53 e4       	ldi	r21, 0x43	; 67
     7ac:	0e 94 ed 09 	call	0x13da	; 0x13da <__mulsf3>
     7b0:	23 ec       	ldi	r18, 0xC3	; 195
     7b2:	35 ef       	ldi	r19, 0xF5	; 245
     7b4:	48 e4       	ldi	r20, 0x48	; 72
     7b6:	50 e4       	ldi	r21, 0x40	; 64
     7b8:	0e 94 5f 08 	call	0x10be	; 0x10be <__divsf3>
     7bc:	2b 01       	movw	r4, r22
     7be:	3c 01       	movw	r6, r24
	//if the result is in the second quadrant, the operand is negative
	//180 degrees will be added to the result
	if (accel1 >= 0 && accel2 <= 0)
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	a9 01       	movw	r20, r18
     7c6:	c7 01       	movw	r24, r14
     7c8:	b6 01       	movw	r22, r12
     7ca:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__gesf2>
     7ce:	88 23       	and	r24, r24
     7d0:	ec f0       	brlt	.+58     	; 0x80c <MPU_double_axis_angle+0xa8>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	a9 01       	movw	r20, r18
     7d8:	c5 01       	movw	r24, r10
     7da:	b4 01       	movw	r22, r8
     7dc:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__cmpsf2>
     7e0:	18 16       	cp	r1, r24
     7e2:	a4 f0       	brlt	.+40     	; 0x80c <MPU_double_axis_angle+0xa8>
		angle += 180;
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	44 e3       	ldi	r20, 0x34	; 52
     7ea:	53 e4       	ldi	r21, 0x43	; 67
     7ec:	c3 01       	movw	r24, r6
     7ee:	b2 01       	movw	r22, r4
     7f0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     7f4:	2b 01       	movw	r4, r22
     7f6:	3c 01       	movw	r6, r24
	//if the result is in the third quadrant, the operand is negative
	//180 degrees will be subtracted from the result
	if (accel1 <= 0 && accel2 <= 0)
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	a9 01       	movw	r20, r18
     7fe:	c7 01       	movw	r24, r14
     800:	b6 01       	movw	r22, r12
     802:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__cmpsf2>
     806:	18 16       	cp	r1, r24
     808:	ec f0       	brlt	.+58     	; 0x844 <MPU_double_axis_angle+0xe0>
     80a:	12 c0       	rjmp	.+36     	; 0x830 <MPU_double_axis_angle+0xcc>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	a9 01       	movw	r20, r18
     812:	c7 01       	movw	r24, r14
     814:	b6 01       	movw	r22, r12
     816:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__cmpsf2>
     81a:	18 16       	cp	r1, r24
     81c:	9c f0       	brlt	.+38     	; 0x844 <MPU_double_axis_angle+0xe0>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	a9 01       	movw	r20, r18
     824:	c5 01       	movw	r24, r10
     826:	b4 01       	movw	r22, r8
     828:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__cmpsf2>
     82c:	18 16       	cp	r1, r24
     82e:	54 f0       	brlt	.+20     	; 0x844 <MPU_double_axis_angle+0xe0>
		angle -= 180;
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	44 e3       	ldi	r20, 0x34	; 52
     836:	53 e4       	ldi	r21, 0x43	; 67
     838:	c3 01       	movw	r24, r6
     83a:	b2 01       	movw	r22, r4
     83c:	0e 94 be 07 	call	0xf7c	; 0xf7c <__subsf3>
     840:	2b 01       	movw	r4, r22
     842:	3c 01       	movw	r6, r24

	//return the result as an integer approximation
	return ((int)(angle));
     844:	c3 01       	movw	r24, r6
     846:	b2 01       	movw	r22, r4
     848:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fixsfsi>
 }
     84c:	cb 01       	movw	r24, r22
     84e:	ff 90       	pop	r15
     850:	ef 90       	pop	r14
     852:	df 90       	pop	r13
     854:	cf 90       	pop	r12
     856:	bf 90       	pop	r11
     858:	af 90       	pop	r10
     85a:	9f 90       	pop	r9
     85c:	8f 90       	pop	r8
     85e:	7f 90       	pop	r7
     860:	6f 90       	pop	r6
     862:	5f 90       	pop	r5
     864:	4f 90       	pop	r4
     866:	08 95       	ret

00000868 <MPU_filter_double_axis>:


  //applies an averaging filter on n measurements of the MPU two axis angle
 int MPU_filter_double_axis(int n)
  {
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	6c 01       	movw	r12, r24
	  unsigned int i;
	  int sum = 0;

	  for (i = 0; i < n; i++)
     87a:	7c 01       	movw	r14, r24
     87c:	89 2b       	or	r24, r25
     87e:	99 f0       	breq	.+38     	; 0x8a6 <MPU_filter_double_axis+0x3e>
     880:	00 e0       	ldi	r16, 0x00	; 0
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	c0 e0       	ldi	r28, 0x00	; 0
     886:	d0 e0       	ldi	r29, 0x00	; 0
	  {
		MPU_Power_Up();
     888:	0e 94 63 03 	call	0x6c6	; 0x6c6 <MPU_Power_Up>
		  sum = sum + MPU_double_axis_angle(ACCEL_XOUT_H, ACCEL_YOUT_H);
     88c:	6d e3       	ldi	r22, 0x3D	; 61
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	8b e3       	ldi	r24, 0x3B	; 59
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 b2 03 	call	0x764	; 0x764 <MPU_double_axis_angle>
     898:	08 0f       	add	r16, r24
     89a:	19 1f       	adc	r17, r25
 int MPU_filter_double_axis(int n)
  {
	  unsigned int i;
	  int sum = 0;

	  for (i = 0; i < n; i++)
     89c:	21 96       	adiw	r28, 0x01	; 1
     89e:	ce 15       	cp	r28, r14
     8a0:	df 05       	cpc	r29, r15
     8a2:	91 f7       	brne	.-28     	; 0x888 <MPU_filter_double_axis+0x20>
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <MPU_filter_double_axis+0x42>

  //applies an averaging filter on n measurements of the MPU two axis angle
 int MPU_filter_double_axis(int n)
  {
	  unsigned int i;
	  int sum = 0;
     8a6:	00 e0       	ldi	r16, 0x00	; 0
     8a8:	10 e0       	ldi	r17, 0x00	; 0
	  for (i = 0; i < n; i++)
	  {
		MPU_Power_Up();
		  sum = sum + MPU_double_axis_angle(ACCEL_XOUT_H, ACCEL_YOUT_H);
	  }
	  return (sum / n);
     8aa:	c8 01       	movw	r24, r16
     8ac:	b6 01       	movw	r22, r12
     8ae:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__divmodhi4>
     8b2:	cb 01       	movw	r24, r22
  }
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	08 95       	ret

000008c6 <set_params>:

 int params[6] = {0, 0, 0, 0, 0, 0};

 //Sets the scanning parameters
  void set_params(void)
  {
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
	  char neg = 0;
	  unsigned char receive = 0;
	  int iter = 0;

	  for (i = 0; i < 6; i++){
		params[i] = 0;
     8d0:	ea e0       	ldi	r30, 0x0A	; 10
     8d2:	f1 e0       	ldi	r31, 0x01	; 1
     8d4:	11 82       	std	Z+1, r1	; 0x01
     8d6:	10 82       	st	Z, r1
     8d8:	13 82       	std	Z+3, r1	; 0x03
     8da:	12 82       	std	Z+2, r1	; 0x02
     8dc:	15 82       	std	Z+5, r1	; 0x05
     8de:	14 82       	std	Z+4, r1	; 0x04
     8e0:	17 82       	std	Z+7, r1	; 0x07
     8e2:	16 82       	std	Z+6, r1	; 0x06
     8e4:	11 86       	std	Z+9, r1	; 0x09
     8e6:	10 86       	std	Z+8, r1	; 0x08
     8e8:	13 86       	std	Z+11, r1	; 0x0b
     8ea:	12 86       	std	Z+10, r1	; 0x0a
	  }

	  i = 0;
	  receive = 0;
	  Serial_write_char(CONTINUE_SEND);
     8ec:	8d e7       	ldi	r24, 0x7D	; 125
     8ee:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>
	  receive = Serial_read_char();
     8f2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Serial_read_char>
	  while(receive != SET_PARAMS)
     8f6:	8e 37       	cpi	r24, 0x7E	; 126
     8f8:	09 f4       	brne	.+2      	; 0x8fc <set_params+0x36>
     8fa:	40 c0       	rjmp	.+128    	; 0x97c <__stack+0x7d>
     8fc:	10 e0       	ldi	r17, 0x00	; 0
     8fe:	c0 e0       	ldi	r28, 0x00	; 0
     900:	d0 e0       	ldi	r29, 0x00	; 0
			  i++;
		  }
		  else
		  {
			  if (receive == '-'){
				  neg = 1;
     902:	ff 24       	eor	r15, r15
     904:	f3 94       	inc	r15
		  {
			  if (neg == 1)
			 {
				params[i] = params[i] * (-1);
			 }
			  neg = 0;
     906:	00 e0       	ldi	r16, 0x00	; 0
	  Serial_write_char(CONTINUE_SEND);
	  receive = Serial_read_char();
	  while(receive != SET_PARAMS)
	  {
			iter++;
		  if (receive == ' ')
     908:	80 32       	cpi	r24, 0x20	; 32
     90a:	89 f4       	brne	.+34     	; 0x92e <__stack+0x2f>
		  {
			  if (neg == 1)
     90c:	11 30       	cpi	r17, 0x01	; 1
     90e:	61 f4       	brne	.+24     	; 0x928 <__stack+0x29>
			 {
				params[i] = params[i] * (-1);
     910:	fe 01       	movw	r30, r28
     912:	ee 0f       	add	r30, r30
     914:	ff 1f       	adc	r31, r31
     916:	e6 5f       	subi	r30, 0xF6	; 246
     918:	fe 4f       	sbci	r31, 0xFE	; 254
     91a:	80 81       	ld	r24, Z
     91c:	91 81       	ldd	r25, Z+1	; 0x01
     91e:	91 95       	neg	r25
     920:	81 95       	neg	r24
     922:	91 09       	sbc	r25, r1
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	80 83       	st	Z, r24
			 }
			  neg = 0;
			  i++;
     928:	21 96       	adiw	r28, 0x01	; 1
		  {
			  if (neg == 1)
			 {
				params[i] = params[i] * (-1);
			 }
			  neg = 0;
     92a:	10 2f       	mov	r17, r16
     92c:	20 c0       	rjmp	.+64     	; 0x96e <__stack+0x6f>
			  i++;
		  }
		  else
		  {
			  if (receive == '-'){
     92e:	8d 32       	cpi	r24, 0x2D	; 45
     930:	e9 f0       	breq	.+58     	; 0x96c <__stack+0x6d>
				  neg = 1;
			  }
			  else
			  {
				  if (receive >= 48 && receive <= 57) {
     932:	90 ed       	ldi	r25, 0xD0	; 208
     934:	98 0f       	add	r25, r24
     936:	9a 30       	cpi	r25, 0x0A	; 10
     938:	d0 f4       	brcc	.+52     	; 0x96e <__stack+0x6f>
					  params[i] = params[i] * 10 + (receive - 48);
     93a:	fe 01       	movw	r30, r28
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	e6 5f       	subi	r30, 0xF6	; 246
     942:	fe 4f       	sbci	r31, 0xFE	; 254
     944:	20 81       	ld	r18, Z
     946:	31 81       	ldd	r19, Z+1	; 0x01
     948:	a9 01       	movw	r20, r18
     94a:	44 0f       	add	r20, r20
     94c:	55 1f       	adc	r21, r21
     94e:	22 0f       	add	r18, r18
     950:	33 1f       	adc	r19, r19
     952:	22 0f       	add	r18, r18
     954:	33 1f       	adc	r19, r19
     956:	22 0f       	add	r18, r18
     958:	33 1f       	adc	r19, r19
     95a:	24 0f       	add	r18, r20
     95c:	35 1f       	adc	r19, r21
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	c0 97       	sbiw	r24, 0x30	; 48
     962:	82 0f       	add	r24, r18
     964:	93 1f       	adc	r25, r19
     966:	91 83       	std	Z+1, r25	; 0x01
     968:	80 83       	st	Z, r24
     96a:	01 c0       	rjmp	.+2      	; 0x96e <__stack+0x6f>
			  i++;
		  }
		  else
		  {
			  if (receive == '-'){
				  neg = 1;
     96c:	1f 2d       	mov	r17, r15
				  if (receive >= 48 && receive <= 57) {
					  params[i] = params[i] * 10 + (receive - 48);
				  }
			  }
		  }
		  Serial_write_char(CONTINUE_SEND);
     96e:	8d e7       	ldi	r24, 0x7D	; 125
     970:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>
		  receive = Serial_read_char();
     974:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Serial_read_char>

	  i = 0;
	  receive = 0;
	  Serial_write_char(CONTINUE_SEND);
	  receive = Serial_read_char();
	  while(receive != SET_PARAMS)
     978:	8e 37       	cpi	r24, 0x7E	; 126
     97a:	31 f6       	brne	.-116    	; 0x908 <__stack+0x9>
		  }
		  Serial_write_char(CONTINUE_SEND);
		  receive = Serial_read_char();
	  }

	  stepper_resolution = params[0];
     97c:	ea e0       	ldi	r30, 0x0A	; 10
     97e:	f1 e0       	ldi	r31, 0x01	; 1
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <stepper_resolution+0x1>
     988:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <stepper_resolution>
	  stepper_max_steps = params[1];
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	93 81       	ldd	r25, Z+3	; 0x03
     990:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <stepper_max_steps+0x1>
     994:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <stepper_max_steps>
	  servo_angle_resolution = params[2];
     998:	84 81       	ldd	r24, Z+4	; 0x04
     99a:	95 81       	ldd	r25, Z+5	; 0x05
     99c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servo_angle_resolution+0x1>
     9a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servo_angle_resolution>
	  servo_max_angle = params[3];
     9a4:	86 81       	ldd	r24, Z+6	; 0x06
     9a6:	97 81       	ldd	r25, Z+7	; 0x07
     9a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     9ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	  servo_start_position = params[4];
     9b0:	80 85       	ldd	r24, Z+8	; 0x08
     9b2:	91 85       	ldd	r25, Z+9	; 0x09
     9b4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <servo_start_position+0x1>
     9b8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <servo_start_position>
	  lidar_config = params[5];
     9bc:	82 85       	ldd	r24, Z+10	; 0x0a
     9be:	93 85       	ldd	r25, Z+11	; 0x0b
     9c0:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <lidar_config+0x1>
     9c4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <lidar_config>
	  LIDAR_configuration(lidar_config);
     9c8:	0e 94 25 02 	call	0x44a	; 0x44a <LIDAR_configuration>
  }
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	08 95       	ret

000009d8 <Scan_Step_Measurement>:



//Takes a measurement from the LIDAR and the stepper motor makes a step
 void Scan_Step_Measurement(unsigned char dir, unsigned char *stepvar, unsigned int *stepper_count, int current_servo_angle)
 {
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	f8 2e       	mov	r15, r24
     9e8:	6b 01       	movw	r12, r22
     9ea:	8a 01       	movw	r16, r20
	 unsigned int i = *stepper_count;
     9ec:	fa 01       	movw	r30, r20
     9ee:	c0 81       	ld	r28, Z
     9f0:	d1 81       	ldd	r29, Z+1	; 0x01

	 //take a measurement with the LIDAR
	 Serial_write_int(LIDAR_distance_measurement());
     9f2:	0e 94 08 02 	call	0x410	; 0x410 <LIDAR_distance_measurement>
     9f6:	0e 94 56 06 	call	0xcac	; 0xcac <Serial_write_int>
	 Serial_write_char(' ');
     9fa:	80 e2       	ldi	r24, 0x20	; 32
     9fc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>
	 //LIDAR_distance_measurement();
	 //The stepper makes one step; usually the minimum delay between steps is 2 ms
	 //An additional delay is not needed because only the measurement itself takes longer than 2 ms, if you measure it with a timer
	Stepper_n_Steps(stepper_resolution, dir, stepvar);
     a00:	a6 01       	movw	r20, r12
     a02:	6f 2d       	mov	r22, r15
     a04:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <stepper_resolution>
     a08:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <stepper_resolution+0x1>
     a0c:	0e 94 3a 07 	call	0xe74	; 0xe74 <Stepper_n_Steps>
	 //increment the stepper counter
	 i += stepper_resolution;
	 *stepper_count = i;
     a10:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <stepper_resolution>
     a14:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <stepper_resolution+0x1>
     a18:	c8 0f       	add	r28, r24
     a1a:	d9 1f       	adc	r29, r25
     a1c:	f8 01       	movw	r30, r16
     a1e:	d1 83       	std	Z+1, r29	; 0x01
     a20:	c0 83       	st	Z, r28

	 /*if (i % 256 == 0)
	 {
		setAngle(current_servo_angle);
	}*/
 }
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	df 90       	pop	r13
     a2e:	cf 90       	pop	r12
     a30:	08 95       	ret

00000a32 <Scan_X_Axis>:

//The scanner makes a swipe scan on the X axis
 void Scan_X_Axis(unsigned int nr_steps, unsigned char *dir, unsigned char *stepvar, int *servo_angle)
 {
     a32:	7f 92       	push	r7
     a34:	8f 92       	push	r8
     a36:	9f 92       	push	r9
     a38:	af 92       	push	r10
     a3a:	bf 92       	push	r11
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <Scan_X_Axis+0x1c>
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	7c 01       	movw	r14, r24
     a54:	5b 01       	movw	r10, r22
     a56:	6a 01       	movw	r12, r20
     a58:	49 01       	movw	r8, r18
	//initialize the stepper counter
	 unsigned int stepper_count = 0;
     a5a:	1a 82       	std	Y+2, r1	; 0x02
     a5c:	19 82       	std	Y+1, r1	; 0x01
	 int aux = *servo_angle;
     a5e:	f9 01       	movw	r30, r18
     a60:	00 81       	ld	r16, Z
     a62:	11 81       	ldd	r17, Z+1	; 0x01
	 unsigned char dir_aux = *dir;
     a64:	fb 01       	movw	r30, r22
     a66:	70 80       	ld	r7, Z

	 //the stepper makes a number of steps, taking one measurement at every step
	 while (stepper_count < nr_steps)
     a68:	89 2b       	or	r24, r25
     a6a:	69 f0       	breq	.+26     	; 0xa86 <Scan_X_Axis+0x54>
	{
		Scan_Step_Measurement(dir_aux, stepvar, &stepper_count, aux);
     a6c:	98 01       	movw	r18, r16
     a6e:	ae 01       	movw	r20, r28
     a70:	4f 5f       	subi	r20, 0xFF	; 255
     a72:	5f 4f       	sbci	r21, 0xFF	; 255
     a74:	b6 01       	movw	r22, r12
     a76:	87 2d       	mov	r24, r7
     a78:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <Scan_Step_Measurement>
	 unsigned int stepper_count = 0;
	 int aux = *servo_angle;
	 unsigned char dir_aux = *dir;

	 //the stepper makes a number of steps, taking one measurement at every step
	 while (stepper_count < nr_steps)
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	9a 81       	ldd	r25, Y+2	; 0x02
     a80:	8e 15       	cp	r24, r14
     a82:	9f 05       	cpc	r25, r15
     a84:	98 f3       	brcs	.-26     	; 0xa6c <Scan_X_Axis+0x3a>
	{
		Scan_Step_Measurement(dir_aux, stepvar, &stepper_count, aux);
	}
	Serial_write_int(LIDAR_distance_measurement());
     a86:	0e 94 08 02 	call	0x410	; 0x410 <LIDAR_distance_measurement>
     a8a:	0e 94 56 06 	call	0xcac	; 0xcac <Serial_write_int>
	Serial_write_char(' ');
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>

	//Send new line and carriage return
	 Serial_write_char(13);
     a94:	8d e0       	ldi	r24, 0x0D	; 13
     a96:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>
	 Serial_write_char('\n');
     a9a:	8a e0       	ldi	r24, 0x0A	; 10
     a9c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>

	 //decrement the servo counter
	 aux -= servo_angle_resolution;
     aa0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <servo_angle_resolution>
     aa4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <servo_angle_resolution+0x1>
     aa8:	98 01       	movw	r18, r16
     aaa:	28 1b       	sub	r18, r24
     aac:	39 0b       	sbc	r19, r25
     aae:	c9 01       	movw	r24, r18
	 *servo_angle = aux;
     ab0:	f4 01       	movw	r30, r8
     ab2:	31 83       	std	Z+1, r19	; 0x01
     ab4:	20 83       	st	Z, r18
	//when an X axis scan has completed, the servo makes a step
	setAngle(aux);
     ab6:	0e 94 94 01 	call	0x328	; 0x328 <setAngle>
	 //Set the MPU in sleep mode
	 MPU_Power_Down();
     aba:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MPU_Power_Down>

	 //change the direction of the next X axis scan
	 dir_aux ^= 0x01;
	 *dir = dir_aux;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	78 26       	eor	r7, r24
     ac2:	f5 01       	movw	r30, r10
     ac4:	70 82       	st	Z, r7
 }
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	9f 90       	pop	r9
     ae0:	8f 90       	pop	r8
     ae2:	7f 90       	pop	r7
     ae4:	08 95       	ret

00000ae6 <Scan_XY>:

 void Scan_XY(unsigned char *dir, unsigned char *stepvar)
 {
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <Scan_XY+0x10>
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	8c 01       	movw	r16, r24
     afc:	7b 01       	movw	r14, r22
	//initialize the servo counter
	int servo_angle = servo_start_position;
     afe:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <servo_start_position>
     b02:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <servo_start_position+0x1>
     b06:	9a 83       	std	Y+2, r25	; 0x02
     b08:	89 83       	std	Y+1, r24	; 0x01
	unsigned char dir_aux = *dir;
     b0a:	f8 01       	movw	r30, r16
     b0c:	d0 80       	ld	r13, Z

	 setAngle(servo_start_position);
     b0e:	0e 94 94 01 	call	0x328	; 0x328 <setAngle>

	  dir_aux ^= 0x01;
	  Stepper_n_Steps(stepper_max_steps / 2, dir_aux, stepvar);
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	6d 25       	eor	r22, r13
     b16:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <stepper_max_steps>
     b1a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <stepper_max_steps+0x1>
     b1e:	a7 01       	movw	r20, r14
     b20:	96 95       	lsr	r25
     b22:	87 95       	ror	r24
     b24:	0e 94 3a 07 	call	0xe74	; 0xe74 <Stepper_n_Steps>
     b28:	ff ef       	ldi	r31, 0xFF	; 255
     b2a:	21 ee       	ldi	r18, 0xE1	; 225
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	f1 50       	subi	r31, 0x01	; 1
     b30:	20 40       	sbci	r18, 0x00	; 0
     b32:	80 40       	sbci	r24, 0x00	; 0
     b34:	e1 f7       	brne	.-8      	; 0xb2e <Scan_XY+0x48>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <Scan_XY+0x52>
     b38:	00 00       	nop
	   _delay_ms(100);

	 //the servo makes a certain number of steps, making a full X axis scan at every step
	 while (servo_angle >= servo_max_angle)
     b3a:	29 81       	ldd	r18, Y+1	; 0x01
     b3c:	3a 81       	ldd	r19, Y+2	; 0x02
     b3e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b42:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	a4 f0       	brlt	.+40     	; 0xb74 <Scan_XY+0x8e>
	{
		Scan_X_Axis(stepper_max_steps, dir, stepvar, &servo_angle);
     b4c:	9e 01       	movw	r18, r28
     b4e:	2f 5f       	subi	r18, 0xFF	; 255
     b50:	3f 4f       	sbci	r19, 0xFF	; 255
     b52:	a7 01       	movw	r20, r14
     b54:	b8 01       	movw	r22, r16
     b56:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <stepper_max_steps>
     b5a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <stepper_max_steps+0x1>
     b5e:	0e 94 19 05 	call	0xa32	; 0xa32 <Scan_X_Axis>
	  dir_aux ^= 0x01;
	  Stepper_n_Steps(stepper_max_steps / 2, dir_aux, stepvar);
	   _delay_ms(100);

	 //the servo makes a certain number of steps, making a full X axis scan at every step
	 while (servo_angle >= servo_max_angle)
     b62:	29 81       	ldd	r18, Y+1	; 0x01
     b64:	3a 81       	ldd	r19, Y+2	; 0x02
     b66:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b6a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     b6e:	28 17       	cp	r18, r24
     b70:	39 07       	cpc	r19, r25
     b72:	64 f7       	brge	.-40     	; 0xb4c <Scan_XY+0x66>
	{
		Scan_X_Axis(stepper_max_steps, dir, stepvar, &servo_angle);
	}
	
	 dir_aux = *dir;
     b74:	f8 01       	movw	r30, r16
     b76:	d0 80       	ld	r13, Z
	 Stepper_n_Steps(stepper_max_steps / 2, dir_aux, stepvar);
     b78:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <stepper_max_steps>
     b7c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <stepper_max_steps+0x1>
     b80:	a7 01       	movw	r20, r14
     b82:	6d 2d       	mov	r22, r13
     b84:	96 95       	lsr	r25
     b86:	87 95       	ror	r24
     b88:	0e 94 3a 07 	call	0xe74	; 0xe74 <Stepper_n_Steps>
	 dir_aux ^= 0x01;
	 *dir = dir_aux;
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	6d 25       	eor	r22, r13
     b90:	f8 01       	movw	r30, r16
     b92:	60 83       	st	Z, r22

	 Serial_write_char(127);
     b94:	8f e7       	ldi	r24, 0x7F	; 127
     b96:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>
	//when the XY scan is done, the servo stops and is set back in its initial position
	setAngle(0);
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 94 01 	call	0x328	; 0x328 <setAngle>
     ba2:	ff ef       	ldi	r31, 0xFF	; 255
     ba4:	23 ed       	ldi	r18, 0xD3	; 211
     ba6:	80 e3       	ldi	r24, 0x30	; 48
     ba8:	f1 50       	subi	r31, 0x01	; 1
     baa:	20 40       	sbci	r18, 0x00	; 0
     bac:	80 40       	sbci	r24, 0x00	; 0
     bae:	e1 f7       	brne	.-8      	; 0xba8 <Scan_XY+0xc2>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <Scan_XY+0xcc>
     bb2:	00 00       	nop
	_delay_ms(1000);
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	08 95       	ret

00000bc8 <Serial_setup>:

//sets up the serial port, making it ready for communication
void Serial_setup(void)
{
	//Enable Transmission and Receiver
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
     bc8:	88 e1       	ldi	r24, 0x18	; 24
     bca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	//8 bit frame, 1 stop bit, no parity
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     bce:	86 e0       	ldi	r24, 0x06	; 6
     bd0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>

	//sets the High byte of the USART Baud Rate register
	UBRR0H = (BRC >> 8);
     bd4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	
	//sets the Low byte of the USART Baud Rate register
	UBRR0L = BRC;
     bd8:	8c e0       	ldi	r24, 0x0C	; 12
     bda:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     bde:	08 95       	ret

00000be0 <Serial_write_char>:

//Writes a single character on the serial line
void Serial_write_char(char c)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1 << UDRE0) ) )
     be0:	e0 ec       	ldi	r30, 0xC0	; 192
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	90 81       	ld	r25, Z
     be6:	95 ff       	sbrs	r25, 5
     be8:	fd cf       	rjmp	.-6      	; 0xbe4 <Serial_write_char+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
     bea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     bee:	08 95       	ret

00000bf0 <Serial_read_char>:

//Reads a single 8-bit value, incoming from the Serial port
unsigned char Serial_read_char(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
     bf0:	e0 ec       	ldi	r30, 0xC0	; 192
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 23       	and	r24, r24
     bf8:	ec f7       	brge	.-6      	; 0xbf4 <Serial_read_char+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
     bfa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
     bfe:	08 95       	ret

00000c00 <mirr_number>:
	 }
}

//returns the mirrored number of the input
unsigned int mirr_number(unsigned int num)
{
     c00:	fc 01       	movw	r30, r24
	unsigned int val = 0;
	while (num > 0)
     c02:	89 2b       	or	r24, r25
     c04:	a9 f1       	breq	.+106    	; 0xc70 <mirr_number+0x70>
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
	{
		val = val * 10 + num % 10;
     c0a:	ca 01       	movw	r24, r20
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	44 0f       	add	r20, r20
     c12:	55 1f       	adc	r21, r21
     c14:	44 0f       	add	r20, r20
     c16:	55 1f       	adc	r21, r21
     c18:	44 0f       	add	r20, r20
     c1a:	55 1f       	adc	r21, r21
     c1c:	48 0f       	add	r20, r24
     c1e:	59 1f       	adc	r21, r25
     c20:	9f 01       	movw	r18, r30
     c22:	ad ec       	ldi	r26, 0xCD	; 205
     c24:	bc ec       	ldi	r27, 0xCC	; 204
     c26:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__umulhisi3>
     c2a:	96 95       	lsr	r25
     c2c:	87 95       	ror	r24
     c2e:	96 95       	lsr	r25
     c30:	87 95       	ror	r24
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	9c 01       	movw	r18, r24
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	82 0f       	add	r24, r18
     c4a:	93 1f       	adc	r25, r19
     c4c:	9f 01       	movw	r18, r30
     c4e:	28 1b       	sub	r18, r24
     c50:	39 0b       	sbc	r19, r25
     c52:	42 0f       	add	r20, r18
     c54:	53 1f       	adc	r21, r19
		num = num / 10;
     c56:	9f 01       	movw	r18, r30
     c58:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__umulhisi3>
     c5c:	fc 01       	movw	r30, r24
     c5e:	f6 95       	lsr	r31
     c60:	e7 95       	ror	r30
     c62:	f6 95       	lsr	r31
     c64:	e7 95       	ror	r30
     c66:	f6 95       	lsr	r31
     c68:	e7 95       	ror	r30

//returns the mirrored number of the input
unsigned int mirr_number(unsigned int num)
{
	unsigned int val = 0;
	while (num > 0)
     c6a:	30 97       	sbiw	r30, 0x00	; 0
     c6c:	71 f6       	brne	.-100    	; 0xc0a <mirr_number+0xa>
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <mirr_number+0x74>
}

//returns the mirrored number of the input
unsigned int mirr_number(unsigned int num)
{
	unsigned int val = 0;
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	50 e0       	ldi	r21, 0x00	; 0
	{
		val = val * 10 + num % 10;
		num = num / 10;
	}
	return (val);
}
     c74:	ca 01       	movw	r24, r20
     c76:	08 95       	ret

00000c78 <nr_cif>:

//returns the number of digits in a given number
unsigned int nr_cif(unsigned int num)
{
     c78:	9c 01       	movw	r18, r24
	unsigned int sum = 0;

	while (num > 0)
     c7a:	89 2b       	or	r24, r25
     c7c:	99 f0       	breq	.+38     	; 0xca4 <nr_cif+0x2c>
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
	{
		sum++;
     c82:	4f 5f       	subi	r20, 0xFF	; 255
     c84:	5f 4f       	sbci	r21, 0xFF	; 255
		num = num / 10;
     c86:	ad ec       	ldi	r26, 0xCD	; 205
     c88:	bc ec       	ldi	r27, 0xCC	; 204
     c8a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__umulhisi3>
     c8e:	9c 01       	movw	r18, r24
     c90:	36 95       	lsr	r19
     c92:	27 95       	ror	r18
     c94:	36 95       	lsr	r19
     c96:	27 95       	ror	r18
     c98:	36 95       	lsr	r19
     c9a:	27 95       	ror	r18
//returns the number of digits in a given number
unsigned int nr_cif(unsigned int num)
{
	unsigned int sum = 0;

	while (num > 0)
     c9c:	21 15       	cp	r18, r1
     c9e:	31 05       	cpc	r19, r1
     ca0:	81 f7       	brne	.-32     	; 0xc82 <nr_cif+0xa>
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <nr_cif+0x30>
}

//returns the number of digits in a given number
unsigned int nr_cif(unsigned int num)
{
	unsigned int sum = 0;
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
		sum++;
		num = num / 10;
	}

	return (sum);
}
     ca8:	ca 01       	movw	r24, r20
     caa:	08 95       	ret

00000cac <Serial_write_int>:
	return UDR0;
}

//displays an integer number on the serial port
void Serial_write_int(int num)
{
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	7c 01       	movw	r14, r24
	unsigned int val;
	unsigned int cif;

	//in case the number is negative
	if (num < 0)
     cba:	99 23       	and	r25, r25
     cbc:	34 f4       	brge	.+12     	; 0xcca <Serial_write_int+0x1e>
	{
		Serial_write_char('-');
     cbe:	8d e2       	ldi	r24, 0x2D	; 45
     cc0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>
		num = num * (-1);
     cc4:	f1 94       	neg	r15
     cc6:	e1 94       	neg	r14
     cc8:	f1 08       	sbc	r15, r1
	}

	//we send the digits in reverse order
	val = mirr_number(num);
     cca:	c7 01       	movw	r24, r14
     ccc:	0e 94 00 06 	call	0xc00	; 0xc00 <mirr_number>
     cd0:	ec 01       	movw	r28, r24
	//in case the number ends with a 0 we need to know the number of digits it has
	cif = nr_cif(num);
     cd2:	c7 01       	movw	r24, r14
     cd4:	0e 94 3c 06 	call	0xc78	; 0xc78 <nr_cif>
     cd8:	8c 01       	movw	r16, r24

	while (val > 0)
     cda:	20 97       	sbiw	r28, 0x00	; 0
     cdc:	69 f1       	breq	.+90     	; 0xd38 <Serial_write_int+0x8c>
	{
		//write digit by digit
		Serial_write_char(val % 10 + 48);
     cde:	9e 01       	movw	r18, r28
     ce0:	ad ec       	ldi	r26, 0xCD	; 205
     ce2:	bc ec       	ldi	r27, 0xCC	; 204
     ce4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__umulhisi3>
     ce8:	96 95       	lsr	r25
     cea:	87 95       	ror	r24
     cec:	96 95       	lsr	r25
     cee:	87 95       	ror	r24
     cf0:	96 95       	lsr	r25
     cf2:	87 95       	ror	r24
     cf4:	9c 01       	movw	r18, r24
     cf6:	22 0f       	add	r18, r18
     cf8:	33 1f       	adc	r19, r19
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	82 0f       	add	r24, r18
     d08:	93 1f       	adc	r25, r19
     d0a:	9e 01       	movw	r18, r28
     d0c:	28 1b       	sub	r18, r24
     d0e:	39 0b       	sbc	r19, r25
     d10:	c9 01       	movw	r24, r18
     d12:	80 5d       	subi	r24, 0xD0	; 208
     d14:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>
		val = val / 10;
     d18:	9e 01       	movw	r18, r28
     d1a:	ad ec       	ldi	r26, 0xCD	; 205
     d1c:	bc ec       	ldi	r27, 0xCC	; 204
     d1e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__umulhisi3>
     d22:	ec 01       	movw	r28, r24
     d24:	d6 95       	lsr	r29
     d26:	c7 95       	ror	r28
     d28:	d6 95       	lsr	r29
     d2a:	c7 95       	ror	r28
     d2c:	d6 95       	lsr	r29
     d2e:	c7 95       	ror	r28
		cif--;
     d30:	01 50       	subi	r16, 0x01	; 1
     d32:	11 09       	sbc	r17, r1
	//we send the digits in reverse order
	val = mirr_number(num);
	//in case the number ends with a 0 we need to know the number of digits it has
	cif = nr_cif(num);

	while (val > 0)
     d34:	20 97       	sbiw	r28, 0x00	; 0
     d36:	99 f6       	brne	.-90     	; 0xcde <Serial_write_int+0x32>
		//write digit by digit
		Serial_write_char(val % 10 + 48);
		val = val / 10;
		cif--;
	}
	 if (cif > 0 || num == 0)
     d38:	01 15       	cp	r16, r1
     d3a:	11 05       	cpc	r17, r1
     d3c:	49 f4       	brne	.+18     	; 0xd50 <Serial_write_int+0xa4>
     d3e:	ef 28       	or	r14, r15
     d40:	71 f0       	breq	.+28     	; 0xd5e <Serial_write_int+0xb2>
     d42:	10 c0       	rjmp	.+32     	; 0xd64 <Serial_write_int+0xb8>
		 Serial_write_char('0');
		 if (cif > 0)
		 cif--;
		 while (cif > 0)
		 {
			 Serial_write_char('0');
     d44:	80 e3       	ldi	r24, 0x30	; 48
     d46:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>
			 cif--;
     d4a:	21 97       	sbiw	r28, 0x01	; 1
	 {
		 //case in which the original number ends with a '0' digit, we send out one more '0'
		 Serial_write_char('0');
		 if (cif > 0)
		 cif--;
		 while (cif > 0)
     d4c:	d9 f7       	brne	.-10     	; 0xd44 <Serial_write_int+0x98>
     d4e:	0a c0       	rjmp	.+20     	; 0xd64 <Serial_write_int+0xb8>
		cif--;
	}
	 if (cif > 0 || num == 0)
	 {
		 //case in which the original number ends with a '0' digit, we send out one more '0'
		 Serial_write_char('0');
     d50:	80 e3       	ldi	r24, 0x30	; 48
     d52:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>
		 if (cif > 0)
		 cif--;
     d56:	e8 01       	movw	r28, r16
     d58:	21 97       	sbiw	r28, 0x01	; 1
		 while (cif > 0)
     d5a:	a1 f7       	brne	.-24     	; 0xd44 <Serial_write_int+0x98>
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <Serial_write_int+0xb8>
		cif--;
	}
	 if (cif > 0 || num == 0)
	 {
		 //case in which the original number ends with a '0' digit, we send out one more '0'
		 Serial_write_char('0');
     d5e:	80 e3       	ldi	r24, 0x30	; 48
     d60:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Serial_write_char>
		 {
			 Serial_write_char('0');
			 cif--;
		 }
	 }
}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	08 95       	ret

00000d72 <Set_Timer1_duty>:
 void Set_Timer1_duty(unsigned int duty)
 {
	 //the duty cycle is changed by setting the bottom comparison value
	 unsigned int aux = 0;

	 aux = duty & (0xFF00);
     d72:	9c 01       	movw	r18, r24
     d74:	22 27       	eor	r18, r18
	 aux = aux >> 8;
	 OCR1BH = aux;
     d76:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
	 aux = duty & (0x00FF);
	 OCR1BL = aux;
     d7a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     d7e:	08 95       	ret

00000d80 <Setup_Timer1_PC_PWM>:
 //Set timer 1 with 20 ms period in Phase correct Pwm Mode
 //The duty cycle is set as a parameter
 void Setup_Timer1_PC_PWM(void)
 {
	 //Set Fast PWM Mode
	 TCCR1A |= (1 << WGM11) | (1 << WGM10) | (1 << COM1B1);
     d80:	e0 e8       	ldi	r30, 0x80	; 128
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	83 62       	ori	r24, 0x23	; 35
     d88:	80 83       	st	Z, r24
	 TCCR1B |= (1 << WGM13);
     d8a:	e1 e8       	ldi	r30, 0x81	; 129
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 61       	ori	r24, 0x10	; 16
     d92:	80 83       	st	Z, r24
	 //Set the TOP value so that we get a signal with T = 20 ms
	 OCR1AH = 0X4E;
     d94:	8e e4       	ldi	r24, 0x4E	; 78
     d96:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
	 OCR1AL = 0X20;
     d9a:	80 e2       	ldi	r24, 0x20	; 32
     d9c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     da0:	08 95       	ret

00000da2 <Servo_setup>:
 #include "Servo_Setup.h"

 //sets up the timers, ports and interrupts for correct Servo operation
 void Servo_setup(void)
 {
	DDRB |= (1 << DDB2); //Port B.2 is an output - Timer 1
     da2:	22 9a       	sbi	0x04, 2	; 4
	Setup_Timer1_PC_PWM();
     da4:	0e 94 c0 06 	call	0xd80	; 0xd80 <Setup_Timer1_PC_PWM>
     da8:	08 95       	ret

00000daa <Start_Timer1>:
	 OCR1AL = 0X20;
 }

 void Start_Timer1(void)
 {
	 TCCR1B |= (1 << CS11);
     daa:	e1 e8       	ldi	r30, 0x81	; 129
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	82 60       	ori	r24, 0x02	; 2
     db2:	80 83       	st	Z, r24
     db4:	08 95       	ret

00000db6 <Stop_Timer1>:
 }

 void Stop_Timer1(void)
 {
	 TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10)); // Sets Prescaler to N = 0
     db6:	e1 e8       	ldi	r30, 0x81	; 129
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	88 7f       	andi	r24, 0xF8	; 248
     dbe:	80 83       	st	Z, r24
	 TCNT1 = 0;
     dc0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dc4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dc8:	08 95       	ret

00000dca <Servo_set_rotation>:
	Setup_Timer1_PC_PWM();
 }

 //Set 1000 for clock wise rotation, 1500 for stop, 2000 for Counter Clockwise rotation
 void Servo_set_rotation(unsigned int duty)
 {
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	ec 01       	movw	r28, r24
	Stop_Timer1();
     dd0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <Stop_Timer1>
	Set_Timer1_duty(duty);
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 b9 06 	call	0xd72	; 0xd72 <Set_Timer1_duty>
	Start_Timer1();
     dda:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Start_Timer1>
 }
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <Stepper_Setup_Ports>:
#include "Stepper.h"
#include "Serial_Communication.h"

void Stepper_Setup_Ports()
{
	DDRD |= (1 << DDD7) | (1 << DDD6) | (1 << DDD5) | (1 << DDD4);
     de4:	8a b1       	in	r24, 0x0a	; 10
     de6:	80 6f       	ori	r24, 0xF0	; 240
     de8:	8a b9       	out	0x0a, r24	; 10
     dea:	08 95       	ret

00000dec <Stepper_Step>:

void Stepper_Step(unsigned char dir, unsigned char *stepvar)
{
	unsigned char A, B ,C;
	unsigned char aux = 0;
	unsigned char i = *stepvar;
     dec:	db 01       	movw	r26, r22
     dee:	ec 91       	ld	r30, X

	A = ((i & 0b00000100) >> 2);
     df0:	e2 fb       	bst	r30, 2
     df2:	99 27       	eor	r25, r25
     df4:	90 f9       	bld	r25, 0
	B = ((i & 0b00000010) >> 1);
     df6:	e1 fb       	bst	r30, 1
     df8:	55 27       	eor	r21, r21
     dfa:	50 f9       	bld	r21, 0
	C = (i & 0b00000001);
     dfc:	be 2f       	mov	r27, r30
     dfe:	b1 70       	andi	r27, 0x01	; 1

	aux =  (((A & B) | (A & C)) << 3) +
     e00:	4b 2f       	mov	r20, r27
     e02:	45 2b       	or	r20, r21
     e04:	31 e0       	ldi	r19, 0x01	; 1
     e06:	23 2f       	mov	r18, r19
     e08:	25 27       	eor	r18, r21
     e0a:	39 27       	eor	r19, r25
     e0c:	f4 2f       	mov	r31, r20
     e0e:	f9 23       	and	r31, r25
     e10:	ff 0f       	add	r31, r31
     e12:	ff 0f       	add	r31, r31
     e14:	ff 0f       	add	r31, r31
     e16:	43 23       	and	r20, r19
     e18:	44 0f       	add	r20, r20
     e1a:	4f 0f       	add	r20, r31
     e1c:	f5 2f       	mov	r31, r21
     e1e:	f9 23       	and	r31, r25
     e20:	fb 23       	and	r31, r27
     e22:	a2 2f       	mov	r26, r18
     e24:	a3 23       	and	r26, r19
     e26:	fa 2b       	or	r31, r26
     e28:	4f 0f       	add	r20, r31
     e2a:	5b 23       	and	r21, r27
     e2c:	35 23       	and	r19, r21
     e2e:	29 23       	and	r18, r25
     e30:	93 2f       	mov	r25, r19
     e32:	92 2b       	or	r25, r18
     e34:	99 0f       	add	r25, r25
     e36:	99 0f       	add	r25, r25
     e38:	94 0f       	add	r25, r20
	(((A ^ 0x01) & (B ^ 0x01)) | ((A & B) & C)) ;


	aux = (aux << 4);
	
	PORTD &= 0b00001111;
     e3a:	2b b1       	in	r18, 0x0b	; 11
     e3c:	2f 70       	andi	r18, 0x0F	; 15
     e3e:	2b b9       	out	0x0b, r18	; 11
	PORTD |= aux;
     e40:	2b b1       	in	r18, 0x0b	; 11
     e42:	92 95       	swap	r25
     e44:	90 7f       	andi	r25, 0xF0	; 240
     e46:	92 2b       	or	r25, r18
     e48:	9b b9       	out	0x0b, r25	; 11

	if (dir == 1)
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	49 f4       	brne	.+18     	; 0xe60 <Stepper_Step+0x74>
	{
		
		if (i == 7)
     e4e:	e7 30       	cpi	r30, 0x07	; 7
     e50:	19 f4       	brne	.+6      	; 0xe58 <Stepper_Step+0x6c>
		{
			i = 0;
			*stepvar = i;
     e52:	fb 01       	movw	r30, r22
     e54:	10 82       	st	Z, r1
     e56:	08 95       	ret
		}
		else
		{
			i++;
			*stepvar = i;
     e58:	ef 5f       	subi	r30, 0xFF	; 255
     e5a:	db 01       	movw	r26, r22
     e5c:	ec 93       	st	X, r30
     e5e:	08 95       	ret
		}
	}
	else
	{
		if (i == 0)
     e60:	e1 11       	cpse	r30, r1
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <Stepper_Step+0x80>
		{
			i = 7;
			*stepvar = 7;
     e64:	87 e0       	ldi	r24, 0x07	; 7
     e66:	fb 01       	movw	r30, r22
     e68:	80 83       	st	Z, r24
     e6a:	08 95       	ret
		}
		else
		{
			i--;
			*stepvar = i;
     e6c:	e1 50       	subi	r30, 0x01	; 1
     e6e:	db 01       	movw	r26, r22
     e70:	ec 93       	st	X, r30
     e72:	08 95       	ret

00000e74 <Stepper_n_Steps>:
	}
}

//makes n steps in the given direction
void Stepper_n_Steps(unsigned int n, unsigned char dir, unsigned char *stepvar)
{
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
	unsigned int i;

	for (i = 0; i < n; i++)
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	99 f0       	breq	.+38     	; 0xeac <Stepper_n_Steps+0x38>
     e86:	6a 01       	movw	r12, r20
     e88:	f6 2e       	mov	r15, r22
     e8a:	8c 01       	movw	r16, r24
     e8c:	c0 e0       	ldi	r28, 0x00	; 0
     e8e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Stepper_Step(dir, stepvar);
     e90:	b6 01       	movw	r22, r12
     e92:	8f 2d       	mov	r24, r15
     e94:	0e 94 f6 06 	call	0xdec	; 0xdec <Stepper_Step>
     e98:	8f e3       	ldi	r24, 0x3F	; 63
     e9a:	9f e1       	ldi	r25, 0x1F	; 31
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <Stepper_n_Steps+0x28>
     ea0:	00 c0       	rjmp	.+0      	; 0xea2 <Stepper_n_Steps+0x2e>
     ea2:	00 00       	nop
//makes n steps in the given direction
void Stepper_n_Steps(unsigned int n, unsigned char dir, unsigned char *stepvar)
{
	unsigned int i;

	for (i = 0; i < n; i++)
     ea4:	21 96       	adiw	r28, 0x01	; 1
     ea6:	0c 17       	cp	r16, r28
     ea8:	1d 07       	cpc	r17, r29
     eaa:	91 f7       	brne	.-28     	; 0xe90 <Stepper_n_Steps+0x1c>
	{
		Stepper_Step(dir, stepvar);
		_delay_ms(2);
	}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	08 95       	ret

00000ebc <I2c_init>:
//F_SCL = 6250Hz, T_SCL = 160us
//F_SCL = 400khZ / 16
void I2c_init(void)
{
	//Setting the value of the Bit rate register
	TWBR = TWBR_VAL;
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	TWCR |= (1 << TWEN);
     ec2:	ec eb       	ldi	r30, 0xBC	; 188
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	84 60       	ori	r24, 0x04	; 4
     eca:	80 83       	st	Z, r24
     ecc:	08 95       	ret

00000ece <I2C_start_condition>:

//Starts the I2C communication
void I2C_start_condition(void)
{
	//Sets the bits necessary in the control register
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     ece:	84 ea       	ldi	r24, 0xA4	; 164
     ed0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	//Monitor TWINT to see if the operation is done
	while (!(TWCR & (1<<TWINT)));
     ed4:	ec eb       	ldi	r30, 0xBC	; 188
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	88 23       	and	r24, r24
     edc:	ec f7       	brge	.-6      	; 0xed8 <I2C_start_condition+0xa>
	//test if TWSR has the correct code after START
	if ((TWSR & 0xF8) != START);
     ede:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     ee2:	08 95       	ret

00000ee4 <I2C_stop_condition>:
}

//Stops the I2C communication
void I2C_stop_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     ee4:	84 e9       	ldi	r24, 0x94	; 148
     ee6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     eea:	8f e9       	ldi	r24, 0x9F	; 159
     eec:	9f e0       	ldi	r25, 0x0F	; 15
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <I2C_stop_condition+0xa>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <I2C_stop_condition+0x10>
     ef4:	00 00       	nop
     ef6:	08 95       	ret

00000ef8 <I2C_sensor_addr_write>:

//Sends the sensor address for writing purpose
void I2C_sensor_addr_write(unsigned int addr)
{
	//put the address you want to send in the data register
	TWDR = addr;
     ef8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	//start operation
	TWCR = (1 << TWINT) | (1 << TWEN);
     efc:	84 e8       	ldi	r24, 0x84	; 132
     efe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	//Monitor TWINT to see if the operation is done
	while (!(TWCR & (1<<TWINT)));
     f02:	ec eb       	ldi	r30, 0xBC	; 188
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	88 23       	and	r24, r24
     f0a:	ec f7       	brge	.-6      	; 0xf06 <I2C_sensor_addr_write+0xe>
	//test if the correct code has been set in TWSR for ADDRESS WRITE ACK
	if ((TWSR & 0xF8) != SLAW_ACK);
     f0c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     f10:	08 95       	ret

00000f12 <I2C_sensor_addr_read>:

//Sends the sensor address for reading purpose
void I2C_sensor_addr_read(unsigned int addr)
{
	//put the address you want to send in the data register
	TWDR = addr;
     f12:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	//start operation
	TWCR = (1 << TWINT) | (1 << TWEN);
     f16:	84 e8       	ldi	r24, 0x84	; 132
     f18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	//Monitor TWINT to see if the operation is done
	while (!(TWCR & (1<<TWINT)));
     f1c:	ec eb       	ldi	r30, 0xBC	; 188
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 23       	and	r24, r24
     f24:	ec f7       	brge	.-6      	; 0xf20 <I2C_sensor_addr_read+0xe>
	//test if the correct code has been set in TWSR for ADDRESS READ ACK
	if ((TWSR & 0xF8) != SLAR_ACK);
     f26:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     f2a:	08 95       	ret

00000f2c <I2C_send_register_address>:

//Sends the register address which needs to be accessed
void I2C_send_register_address(unsigned int addr)
{
	//put the address you want to send in the data register
	TWDR = addr;
     f2c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	//start operation
	TWCR = (1 << TWINT) | (1 << TWEN);
     f30:	84 e8       	ldi	r24, 0x84	; 132
     f32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	//Monitor TWINT to see if the operation is done
	while (!(TWCR & (1<<TWINT)));
     f36:	ec eb       	ldi	r30, 0xBC	; 188
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	ec f7       	brge	.-6      	; 0xf3a <I2C_send_register_address+0xe>
	//test if the correct code has been set in TWSR for MASTER TRANSMITTER MODE ACK
	if ((TWSR & 0xF8) != MT_DATA_ACK);
     f40:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     f44:	08 95       	ret

00000f46 <I2C_data_write>:

//Sends one byte of data to the slave
void I2C_data_write(unsigned int data)
{
	//put the data you want to send in the data register
	TWDR = data;
     f46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	//start operation
	TWCR = (1 << TWINT) | (1 << TWEN);
     f4a:	84 e8       	ldi	r24, 0x84	; 132
     f4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	//Monitor TWINT to see if the operation is done
	while (!(TWCR & (1<<TWINT)));
     f50:	ec eb       	ldi	r30, 0xBC	; 188
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	88 23       	and	r24, r24
     f58:	ec f7       	brge	.-6      	; 0xf54 <I2C_data_write+0xe>
	//test if the correct code has been set in TWSR for MASTER TRANSMITTER MODE ACK
	if ((TWSR & 0xF8) != MT_DATA_ACK);
     f5a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     f5e:	08 95       	ret

00000f60 <I2C_read_byte>:

//reads one byte of data from the current accessed register and returns it
unsigned int I2C_read_byte(void)
{
	//initiate the communication
	TWCR = (1 << TWINT) | (1 << TWEN);
     f60:	84 e8       	ldi	r24, 0x84	; 132
     f62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	//Monitor TWINT to see if the operation is done
	while (!(TWCR & (1<<TWINT)));
     f66:	ec eb       	ldi	r30, 0xBC	; 188
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	88 23       	and	r24, r24
     f6e:	ec f7       	brge	.-6      	; 0xf6a <I2C_read_byte+0xa>
	//test if the correct code has been set in TWSR for MASTER RECEIVER MODE
	if ((TWSR & 0xF8) != MR_DATA_NACK);
     f70:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
		//Serial_write_string("\nI2C MR_DATA_NACK ERROR!");
	//return the data received from the slave
	return (TWDR);
     f74:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	08 95       	ret

00000f7c <__subsf3>:
     f7c:	50 58       	subi	r21, 0x80	; 128

00000f7e <__addsf3>:
     f7e:	bb 27       	eor	r27, r27
     f80:	aa 27       	eor	r26, r26
     f82:	0e 94 d6 07 	call	0xfac	; 0xfac <__addsf3x>
     f86:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_round>
     f8a:	0e 94 98 09 	call	0x1330	; 0x1330 <__fp_pscA>
     f8e:	38 f0       	brcs	.+14     	; 0xf9e <__addsf3+0x20>
     f90:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_pscB>
     f94:	20 f0       	brcs	.+8      	; 0xf9e <__addsf3+0x20>
     f96:	39 f4       	brne	.+14     	; 0xfa6 <__addsf3+0x28>
     f98:	9f 3f       	cpi	r25, 0xFF	; 255
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <__addsf3+0x24>
     f9c:	26 f4       	brtc	.+8      	; 0xfa6 <__addsf3+0x28>
     f9e:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_nan>
     fa2:	0e f4       	brtc	.+2      	; 0xfa6 <__addsf3+0x28>
     fa4:	e0 95       	com	r30
     fa6:	e7 fb       	bst	r30, 7
     fa8:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_inf>

00000fac <__addsf3x>:
     fac:	e9 2f       	mov	r30, r25
     fae:	0e 94 b7 09 	call	0x136e	; 0x136e <__fp_split3>
     fb2:	58 f3       	brcs	.-42     	; 0xf8a <__addsf3+0xc>
     fb4:	ba 17       	cp	r27, r26
     fb6:	62 07       	cpc	r22, r18
     fb8:	73 07       	cpc	r23, r19
     fba:	84 07       	cpc	r24, r20
     fbc:	95 07       	cpc	r25, r21
     fbe:	20 f0       	brcs	.+8      	; 0xfc8 <__addsf3x+0x1c>
     fc0:	79 f4       	brne	.+30     	; 0xfe0 <__addsf3x+0x34>
     fc2:	a6 f5       	brtc	.+104    	; 0x102c <__addsf3x+0x80>
     fc4:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__fp_zero>
     fc8:	0e f4       	brtc	.+2      	; 0xfcc <__addsf3x+0x20>
     fca:	e0 95       	com	r30
     fcc:	0b 2e       	mov	r0, r27
     fce:	ba 2f       	mov	r27, r26
     fd0:	a0 2d       	mov	r26, r0
     fd2:	0b 01       	movw	r0, r22
     fd4:	b9 01       	movw	r22, r18
     fd6:	90 01       	movw	r18, r0
     fd8:	0c 01       	movw	r0, r24
     fda:	ca 01       	movw	r24, r20
     fdc:	a0 01       	movw	r20, r0
     fde:	11 24       	eor	r1, r1
     fe0:	ff 27       	eor	r31, r31
     fe2:	59 1b       	sub	r21, r25
     fe4:	99 f0       	breq	.+38     	; 0x100c <__addsf3x+0x60>
     fe6:	59 3f       	cpi	r21, 0xF9	; 249
     fe8:	50 f4       	brcc	.+20     	; 0xffe <__addsf3x+0x52>
     fea:	50 3e       	cpi	r21, 0xE0	; 224
     fec:	68 f1       	brcs	.+90     	; 0x1048 <__addsf3x+0x9c>
     fee:	1a 16       	cp	r1, r26
     ff0:	f0 40       	sbci	r31, 0x00	; 0
     ff2:	a2 2f       	mov	r26, r18
     ff4:	23 2f       	mov	r18, r19
     ff6:	34 2f       	mov	r19, r20
     ff8:	44 27       	eor	r20, r20
     ffa:	58 5f       	subi	r21, 0xF8	; 248
     ffc:	f3 cf       	rjmp	.-26     	; 0xfe4 <__addsf3x+0x38>
     ffe:	46 95       	lsr	r20
    1000:	37 95       	ror	r19
    1002:	27 95       	ror	r18
    1004:	a7 95       	ror	r26
    1006:	f0 40       	sbci	r31, 0x00	; 0
    1008:	53 95       	inc	r21
    100a:	c9 f7       	brne	.-14     	; 0xffe <__addsf3x+0x52>
    100c:	7e f4       	brtc	.+30     	; 0x102c <__addsf3x+0x80>
    100e:	1f 16       	cp	r1, r31
    1010:	ba 0b       	sbc	r27, r26
    1012:	62 0b       	sbc	r22, r18
    1014:	73 0b       	sbc	r23, r19
    1016:	84 0b       	sbc	r24, r20
    1018:	ba f0       	brmi	.+46     	; 0x1048 <__addsf3x+0x9c>
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	a1 f0       	breq	.+40     	; 0x1046 <__addsf3x+0x9a>
    101e:	ff 0f       	add	r31, r31
    1020:	bb 1f       	adc	r27, r27
    1022:	66 1f       	adc	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	c2 f7       	brpl	.-16     	; 0x101a <__addsf3x+0x6e>
    102a:	0e c0       	rjmp	.+28     	; 0x1048 <__addsf3x+0x9c>
    102c:	ba 0f       	add	r27, r26
    102e:	62 1f       	adc	r22, r18
    1030:	73 1f       	adc	r23, r19
    1032:	84 1f       	adc	r24, r20
    1034:	48 f4       	brcc	.+18     	; 0x1048 <__addsf3x+0x9c>
    1036:	87 95       	ror	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	b7 95       	ror	r27
    103e:	f7 95       	ror	r31
    1040:	9e 3f       	cpi	r25, 0xFE	; 254
    1042:	08 f0       	brcs	.+2      	; 0x1046 <__addsf3x+0x9a>
    1044:	b0 cf       	rjmp	.-160    	; 0xfa6 <__addsf3+0x28>
    1046:	93 95       	inc	r25
    1048:	88 0f       	add	r24, r24
    104a:	08 f0       	brcs	.+2      	; 0x104e <__addsf3x+0xa2>
    104c:	99 27       	eor	r25, r25
    104e:	ee 0f       	add	r30, r30
    1050:	97 95       	ror	r25
    1052:	87 95       	ror	r24
    1054:	08 95       	ret

00001056 <atan>:
    1056:	df 93       	push	r29
    1058:	dd 27       	eor	r29, r29
    105a:	b9 2f       	mov	r27, r25
    105c:	bf 77       	andi	r27, 0x7F	; 127
    105e:	40 e8       	ldi	r20, 0x80	; 128
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	16 16       	cp	r1, r22
    1064:	17 06       	cpc	r1, r23
    1066:	48 07       	cpc	r20, r24
    1068:	5b 07       	cpc	r21, r27
    106a:	18 f4       	brcc	.+6      	; 0x1072 <atan+0x1c>
    106c:	d9 2f       	mov	r29, r25
    106e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <inverse>
    1072:	9f 93       	push	r25
    1074:	8f 93       	push	r24
    1076:	7f 93       	push	r23
    1078:	6f 93       	push	r22
    107a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <square>
    107e:	e6 e7       	ldi	r30, 0x76	; 118
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_powser>
    1086:	0e 94 a6 09 	call	0x134c	; 0x134c <__fp_round>
    108a:	2f 91       	pop	r18
    108c:	3f 91       	pop	r19
    108e:	4f 91       	pop	r20
    1090:	5f 91       	pop	r21
    1092:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3x>
    1096:	dd 23       	and	r29, r29
    1098:	51 f0       	breq	.+20     	; 0x10ae <atan+0x58>
    109a:	90 58       	subi	r25, 0x80	; 128
    109c:	a2 ea       	ldi	r26, 0xA2	; 162
    109e:	2a ed       	ldi	r18, 0xDA	; 218
    10a0:	3f e0       	ldi	r19, 0x0F	; 15
    10a2:	49 ec       	ldi	r20, 0xC9	; 201
    10a4:	5f e3       	ldi	r21, 0x3F	; 63
    10a6:	d0 78       	andi	r29, 0x80	; 128
    10a8:	5d 27       	eor	r21, r29
    10aa:	0e 94 d6 07 	call	0xfac	; 0xfac <__addsf3x>
    10ae:	df 91       	pop	r29
    10b0:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_round>

000010b4 <__cmpsf2>:
    10b4:	0e 94 44 09 	call	0x1288	; 0x1288 <__fp_cmp>
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <__cmpsf2+0x8>
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	08 95       	ret

000010be <__divsf3>:
    10be:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__divsf3x>
    10c2:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_round>
    10c6:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_pscB>
    10ca:	58 f0       	brcs	.+22     	; 0x10e2 <__divsf3+0x24>
    10cc:	0e 94 98 09 	call	0x1330	; 0x1330 <__fp_pscA>
    10d0:	40 f0       	brcs	.+16     	; 0x10e2 <__divsf3+0x24>
    10d2:	29 f4       	brne	.+10     	; 0x10de <__divsf3+0x20>
    10d4:	5f 3f       	cpi	r21, 0xFF	; 255
    10d6:	29 f0       	breq	.+10     	; 0x10e2 <__divsf3+0x24>
    10d8:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_inf>
    10dc:	51 11       	cpse	r21, r1
    10de:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>
    10e2:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_nan>

000010e6 <__divsf3x>:
    10e6:	0e 94 b7 09 	call	0x136e	; 0x136e <__fp_split3>
    10ea:	68 f3       	brcs	.-38     	; 0x10c6 <__divsf3+0x8>

000010ec <__divsf3_pse>:
    10ec:	99 23       	and	r25, r25
    10ee:	b1 f3       	breq	.-20     	; 0x10dc <__divsf3+0x1e>
    10f0:	55 23       	and	r21, r21
    10f2:	91 f3       	breq	.-28     	; 0x10d8 <__divsf3+0x1a>
    10f4:	95 1b       	sub	r25, r21
    10f6:	55 0b       	sbc	r21, r21
    10f8:	bb 27       	eor	r27, r27
    10fa:	aa 27       	eor	r26, r26
    10fc:	62 17       	cp	r22, r18
    10fe:	73 07       	cpc	r23, r19
    1100:	84 07       	cpc	r24, r20
    1102:	38 f0       	brcs	.+14     	; 0x1112 <__divsf3_pse+0x26>
    1104:	9f 5f       	subi	r25, 0xFF	; 255
    1106:	5f 4f       	sbci	r21, 0xFF	; 255
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	44 1f       	adc	r20, r20
    110e:	aa 1f       	adc	r26, r26
    1110:	a9 f3       	breq	.-22     	; 0x10fc <__divsf3_pse+0x10>
    1112:	35 d0       	rcall	.+106    	; 0x117e <__divsf3_pse+0x92>
    1114:	0e 2e       	mov	r0, r30
    1116:	3a f0       	brmi	.+14     	; 0x1126 <__divsf3_pse+0x3a>
    1118:	e0 e8       	ldi	r30, 0x80	; 128
    111a:	32 d0       	rcall	.+100    	; 0x1180 <__divsf3_pse+0x94>
    111c:	91 50       	subi	r25, 0x01	; 1
    111e:	50 40       	sbci	r21, 0x00	; 0
    1120:	e6 95       	lsr	r30
    1122:	00 1c       	adc	r0, r0
    1124:	ca f7       	brpl	.-14     	; 0x1118 <__divsf3_pse+0x2c>
    1126:	2b d0       	rcall	.+86     	; 0x117e <__divsf3_pse+0x92>
    1128:	fe 2f       	mov	r31, r30
    112a:	29 d0       	rcall	.+82     	; 0x117e <__divsf3_pse+0x92>
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	88 1f       	adc	r24, r24
    1132:	bb 1f       	adc	r27, r27
    1134:	26 17       	cp	r18, r22
    1136:	37 07       	cpc	r19, r23
    1138:	48 07       	cpc	r20, r24
    113a:	ab 07       	cpc	r26, r27
    113c:	b0 e8       	ldi	r27, 0x80	; 128
    113e:	09 f0       	breq	.+2      	; 0x1142 <__divsf3_pse+0x56>
    1140:	bb 0b       	sbc	r27, r27
    1142:	80 2d       	mov	r24, r0
    1144:	bf 01       	movw	r22, r30
    1146:	ff 27       	eor	r31, r31
    1148:	93 58       	subi	r25, 0x83	; 131
    114a:	5f 4f       	sbci	r21, 0xFF	; 255
    114c:	3a f0       	brmi	.+14     	; 0x115c <__divsf3_pse+0x70>
    114e:	9e 3f       	cpi	r25, 0xFE	; 254
    1150:	51 05       	cpc	r21, r1
    1152:	78 f0       	brcs	.+30     	; 0x1172 <__divsf3_pse+0x86>
    1154:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_inf>
    1158:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>
    115c:	5f 3f       	cpi	r21, 0xFF	; 255
    115e:	e4 f3       	brlt	.-8      	; 0x1158 <__divsf3_pse+0x6c>
    1160:	98 3e       	cpi	r25, 0xE8	; 232
    1162:	d4 f3       	brlt	.-12     	; 0x1158 <__divsf3_pse+0x6c>
    1164:	86 95       	lsr	r24
    1166:	77 95       	ror	r23
    1168:	67 95       	ror	r22
    116a:	b7 95       	ror	r27
    116c:	f7 95       	ror	r31
    116e:	9f 5f       	subi	r25, 0xFF	; 255
    1170:	c9 f7       	brne	.-14     	; 0x1164 <__divsf3_pse+0x78>
    1172:	88 0f       	add	r24, r24
    1174:	91 1d       	adc	r25, r1
    1176:	96 95       	lsr	r25
    1178:	87 95       	ror	r24
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret
    117e:	e1 e0       	ldi	r30, 0x01	; 1
    1180:	66 0f       	add	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	88 1f       	adc	r24, r24
    1186:	bb 1f       	adc	r27, r27
    1188:	62 17       	cp	r22, r18
    118a:	73 07       	cpc	r23, r19
    118c:	84 07       	cpc	r24, r20
    118e:	ba 07       	cpc	r27, r26
    1190:	20 f0       	brcs	.+8      	; 0x119a <__divsf3_pse+0xae>
    1192:	62 1b       	sub	r22, r18
    1194:	73 0b       	sbc	r23, r19
    1196:	84 0b       	sbc	r24, r20
    1198:	ba 0b       	sbc	r27, r26
    119a:	ee 1f       	adc	r30, r30
    119c:	88 f7       	brcc	.-30     	; 0x1180 <__divsf3_pse+0x94>
    119e:	e0 95       	com	r30
    11a0:	08 95       	ret

000011a2 <__fixsfsi>:
    11a2:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fixunssfsi>
    11a6:	68 94       	set
    11a8:	b1 11       	cpse	r27, r1
    11aa:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>
    11ae:	08 95       	ret

000011b0 <__fixunssfsi>:
    11b0:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_splitA>
    11b4:	88 f0       	brcs	.+34     	; 0x11d8 <__fixunssfsi+0x28>
    11b6:	9f 57       	subi	r25, 0x7F	; 127
    11b8:	98 f0       	brcs	.+38     	; 0x11e0 <__fixunssfsi+0x30>
    11ba:	b9 2f       	mov	r27, r25
    11bc:	99 27       	eor	r25, r25
    11be:	b7 51       	subi	r27, 0x17	; 23
    11c0:	b0 f0       	brcs	.+44     	; 0x11ee <__fixunssfsi+0x3e>
    11c2:	e1 f0       	breq	.+56     	; 0x11fc <__fixunssfsi+0x4c>
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	1a f0       	brmi	.+6      	; 0x11d4 <__fixunssfsi+0x24>
    11ce:	ba 95       	dec	r27
    11d0:	c9 f7       	brne	.-14     	; 0x11c4 <__fixunssfsi+0x14>
    11d2:	14 c0       	rjmp	.+40     	; 0x11fc <__fixunssfsi+0x4c>
    11d4:	b1 30       	cpi	r27, 0x01	; 1
    11d6:	91 f0       	breq	.+36     	; 0x11fc <__fixunssfsi+0x4c>
    11d8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__fp_zero>
    11dc:	b1 e0       	ldi	r27, 0x01	; 1
    11de:	08 95       	ret
    11e0:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__fp_zero>
    11e4:	67 2f       	mov	r22, r23
    11e6:	78 2f       	mov	r23, r24
    11e8:	88 27       	eor	r24, r24
    11ea:	b8 5f       	subi	r27, 0xF8	; 248
    11ec:	39 f0       	breq	.+14     	; 0x11fc <__fixunssfsi+0x4c>
    11ee:	b9 3f       	cpi	r27, 0xF9	; 249
    11f0:	cc f3       	brlt	.-14     	; 0x11e4 <__fixunssfsi+0x34>
    11f2:	86 95       	lsr	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	b3 95       	inc	r27
    11fa:	d9 f7       	brne	.-10     	; 0x11f2 <__fixunssfsi+0x42>
    11fc:	3e f4       	brtc	.+14     	; 0x120c <__fixunssfsi+0x5c>
    11fe:	90 95       	com	r25
    1200:	80 95       	com	r24
    1202:	70 95       	com	r23
    1204:	61 95       	neg	r22
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	8f 4f       	sbci	r24, 0xFF	; 255
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	08 95       	ret

0000120e <__floatunsisf>:
    120e:	e8 94       	clt
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <__floatsisf+0x12>

00001212 <__floatsisf>:
    1212:	97 fb       	bst	r25, 7
    1214:	3e f4       	brtc	.+14     	; 0x1224 <__floatsisf+0x12>
    1216:	90 95       	com	r25
    1218:	80 95       	com	r24
    121a:	70 95       	com	r23
    121c:	61 95       	neg	r22
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	99 23       	and	r25, r25
    1226:	a9 f0       	breq	.+42     	; 0x1252 <__floatsisf+0x40>
    1228:	f9 2f       	mov	r31, r25
    122a:	96 e9       	ldi	r25, 0x96	; 150
    122c:	bb 27       	eor	r27, r27
    122e:	93 95       	inc	r25
    1230:	f6 95       	lsr	r31
    1232:	87 95       	ror	r24
    1234:	77 95       	ror	r23
    1236:	67 95       	ror	r22
    1238:	b7 95       	ror	r27
    123a:	f1 11       	cpse	r31, r1
    123c:	f8 cf       	rjmp	.-16     	; 0x122e <__floatsisf+0x1c>
    123e:	fa f4       	brpl	.+62     	; 0x127e <__floatsisf+0x6c>
    1240:	bb 0f       	add	r27, r27
    1242:	11 f4       	brne	.+4      	; 0x1248 <__floatsisf+0x36>
    1244:	60 ff       	sbrs	r22, 0
    1246:	1b c0       	rjmp	.+54     	; 0x127e <__floatsisf+0x6c>
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	16 c0       	rjmp	.+44     	; 0x127e <__floatsisf+0x6c>
    1252:	88 23       	and	r24, r24
    1254:	11 f0       	breq	.+4      	; 0x125a <__floatsisf+0x48>
    1256:	96 e9       	ldi	r25, 0x96	; 150
    1258:	11 c0       	rjmp	.+34     	; 0x127c <__floatsisf+0x6a>
    125a:	77 23       	and	r23, r23
    125c:	21 f0       	breq	.+8      	; 0x1266 <__floatsisf+0x54>
    125e:	9e e8       	ldi	r25, 0x8E	; 142
    1260:	87 2f       	mov	r24, r23
    1262:	76 2f       	mov	r23, r22
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <__floatsisf+0x5e>
    1266:	66 23       	and	r22, r22
    1268:	71 f0       	breq	.+28     	; 0x1286 <__floatsisf+0x74>
    126a:	96 e8       	ldi	r25, 0x86	; 134
    126c:	86 2f       	mov	r24, r22
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	2a f0       	brmi	.+10     	; 0x127e <__floatsisf+0x6c>
    1274:	9a 95       	dec	r25
    1276:	66 0f       	add	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	da f7       	brpl	.-10     	; 0x1274 <__floatsisf+0x62>
    127e:	88 0f       	add	r24, r24
    1280:	96 95       	lsr	r25
    1282:	87 95       	ror	r24
    1284:	97 f9       	bld	r25, 7
    1286:	08 95       	ret

00001288 <__fp_cmp>:
    1288:	99 0f       	add	r25, r25
    128a:	00 08       	sbc	r0, r0
    128c:	55 0f       	add	r21, r21
    128e:	aa 0b       	sbc	r26, r26
    1290:	e0 e8       	ldi	r30, 0x80	; 128
    1292:	fe ef       	ldi	r31, 0xFE	; 254
    1294:	16 16       	cp	r1, r22
    1296:	17 06       	cpc	r1, r23
    1298:	e8 07       	cpc	r30, r24
    129a:	f9 07       	cpc	r31, r25
    129c:	c0 f0       	brcs	.+48     	; 0x12ce <__fp_cmp+0x46>
    129e:	12 16       	cp	r1, r18
    12a0:	13 06       	cpc	r1, r19
    12a2:	e4 07       	cpc	r30, r20
    12a4:	f5 07       	cpc	r31, r21
    12a6:	98 f0       	brcs	.+38     	; 0x12ce <__fp_cmp+0x46>
    12a8:	62 1b       	sub	r22, r18
    12aa:	73 0b       	sbc	r23, r19
    12ac:	84 0b       	sbc	r24, r20
    12ae:	95 0b       	sbc	r25, r21
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <__fp_cmp+0x38>
    12b2:	0a 26       	eor	r0, r26
    12b4:	61 f0       	breq	.+24     	; 0x12ce <__fp_cmp+0x46>
    12b6:	23 2b       	or	r18, r19
    12b8:	24 2b       	or	r18, r20
    12ba:	25 2b       	or	r18, r21
    12bc:	21 f4       	brne	.+8      	; 0x12c6 <__fp_cmp+0x3e>
    12be:	08 95       	ret
    12c0:	0a 26       	eor	r0, r26
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <__fp_cmp+0x3e>
    12c4:	a1 40       	sbci	r26, 0x01	; 1
    12c6:	a6 95       	lsr	r26
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	81 1d       	adc	r24, r1
    12cc:	81 1d       	adc	r24, r1
    12ce:	08 95       	ret

000012d0 <__fp_inf>:
    12d0:	97 f9       	bld	r25, 7
    12d2:	9f 67       	ori	r25, 0x7F	; 127
    12d4:	80 e8       	ldi	r24, 0x80	; 128
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	08 95       	ret

000012dc <__fp_nan>:
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    12de:	80 ec       	ldi	r24, 0xC0	; 192
    12e0:	08 95       	ret

000012e2 <__fp_powser>:
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	1f 93       	push	r17
    12e8:	0f 93       	push	r16
    12ea:	ff 92       	push	r15
    12ec:	ef 92       	push	r14
    12ee:	df 92       	push	r13
    12f0:	7b 01       	movw	r14, r22
    12f2:	8c 01       	movw	r16, r24
    12f4:	68 94       	set
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <__fp_powser+0x22>
    12f8:	da 2e       	mov	r13, r26
    12fa:	ef 01       	movw	r28, r30
    12fc:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3x>
    1300:	fe 01       	movw	r30, r28
    1302:	e8 94       	clt
    1304:	a5 91       	lpm	r26, Z+
    1306:	25 91       	lpm	r18, Z+
    1308:	35 91       	lpm	r19, Z+
    130a:	45 91       	lpm	r20, Z+
    130c:	55 91       	lpm	r21, Z+
    130e:	a6 f3       	brts	.-24     	; 0x12f8 <__fp_powser+0x16>
    1310:	ef 01       	movw	r28, r30
    1312:	0e 94 d6 07 	call	0xfac	; 0xfac <__addsf3x>
    1316:	fe 01       	movw	r30, r28
    1318:	97 01       	movw	r18, r14
    131a:	a8 01       	movw	r20, r16
    131c:	da 94       	dec	r13
    131e:	69 f7       	brne	.-38     	; 0x12fa <__fp_powser+0x18>
    1320:	df 90       	pop	r13
    1322:	ef 90       	pop	r14
    1324:	ff 90       	pop	r15
    1326:	0f 91       	pop	r16
    1328:	1f 91       	pop	r17
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <__fp_pscA>:
    1330:	00 24       	eor	r0, r0
    1332:	0a 94       	dec	r0
    1334:	16 16       	cp	r1, r22
    1336:	17 06       	cpc	r1, r23
    1338:	18 06       	cpc	r1, r24
    133a:	09 06       	cpc	r0, r25
    133c:	08 95       	ret

0000133e <__fp_pscB>:
    133e:	00 24       	eor	r0, r0
    1340:	0a 94       	dec	r0
    1342:	12 16       	cp	r1, r18
    1344:	13 06       	cpc	r1, r19
    1346:	14 06       	cpc	r1, r20
    1348:	05 06       	cpc	r0, r21
    134a:	08 95       	ret

0000134c <__fp_round>:
    134c:	09 2e       	mov	r0, r25
    134e:	03 94       	inc	r0
    1350:	00 0c       	add	r0, r0
    1352:	11 f4       	brne	.+4      	; 0x1358 <__fp_round+0xc>
    1354:	88 23       	and	r24, r24
    1356:	52 f0       	brmi	.+20     	; 0x136c <__fp_round+0x20>
    1358:	bb 0f       	add	r27, r27
    135a:	40 f4       	brcc	.+16     	; 0x136c <__fp_round+0x20>
    135c:	bf 2b       	or	r27, r31
    135e:	11 f4       	brne	.+4      	; 0x1364 <__fp_round+0x18>
    1360:	60 ff       	sbrs	r22, 0
    1362:	04 c0       	rjmp	.+8      	; 0x136c <__fp_round+0x20>
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	8f 4f       	sbci	r24, 0xFF	; 255
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	08 95       	ret

0000136e <__fp_split3>:
    136e:	57 fd       	sbrc	r21, 7
    1370:	90 58       	subi	r25, 0x80	; 128
    1372:	44 0f       	add	r20, r20
    1374:	55 1f       	adc	r21, r21
    1376:	59 f0       	breq	.+22     	; 0x138e <__fp_splitA+0x10>
    1378:	5f 3f       	cpi	r21, 0xFF	; 255
    137a:	71 f0       	breq	.+28     	; 0x1398 <__fp_splitA+0x1a>
    137c:	47 95       	ror	r20

0000137e <__fp_splitA>:
    137e:	88 0f       	add	r24, r24
    1380:	97 fb       	bst	r25, 7
    1382:	99 1f       	adc	r25, r25
    1384:	61 f0       	breq	.+24     	; 0x139e <__fp_splitA+0x20>
    1386:	9f 3f       	cpi	r25, 0xFF	; 255
    1388:	79 f0       	breq	.+30     	; 0x13a8 <__fp_splitA+0x2a>
    138a:	87 95       	ror	r24
    138c:	08 95       	ret
    138e:	12 16       	cp	r1, r18
    1390:	13 06       	cpc	r1, r19
    1392:	14 06       	cpc	r1, r20
    1394:	55 1f       	adc	r21, r21
    1396:	f2 cf       	rjmp	.-28     	; 0x137c <__fp_split3+0xe>
    1398:	46 95       	lsr	r20
    139a:	f1 df       	rcall	.-30     	; 0x137e <__fp_splitA>
    139c:	08 c0       	rjmp	.+16     	; 0x13ae <__fp_splitA+0x30>
    139e:	16 16       	cp	r1, r22
    13a0:	17 06       	cpc	r1, r23
    13a2:	18 06       	cpc	r1, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	f1 cf       	rjmp	.-30     	; 0x138a <__fp_splitA+0xc>
    13a8:	86 95       	lsr	r24
    13aa:	71 05       	cpc	r23, r1
    13ac:	61 05       	cpc	r22, r1
    13ae:	08 94       	sec
    13b0:	08 95       	ret

000013b2 <__fp_zero>:
    13b2:	e8 94       	clt

000013b4 <__fp_szero>:
    13b4:	bb 27       	eor	r27, r27
    13b6:	66 27       	eor	r22, r22
    13b8:	77 27       	eor	r23, r23
    13ba:	cb 01       	movw	r24, r22
    13bc:	97 f9       	bld	r25, 7
    13be:	08 95       	ret

000013c0 <__gesf2>:
    13c0:	0e 94 44 09 	call	0x1288	; 0x1288 <__fp_cmp>
    13c4:	08 f4       	brcc	.+2      	; 0x13c8 <__gesf2+0x8>
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	08 95       	ret

000013ca <inverse>:
    13ca:	9b 01       	movw	r18, r22
    13cc:	ac 01       	movw	r20, r24
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	80 e8       	ldi	r24, 0x80	; 128
    13d4:	9f e3       	ldi	r25, 0x3F	; 63
    13d6:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__divsf3>

000013da <__mulsf3>:
    13da:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3x>
    13de:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_round>
    13e2:	0e 94 98 09 	call	0x1330	; 0x1330 <__fp_pscA>
    13e6:	38 f0       	brcs	.+14     	; 0x13f6 <__mulsf3+0x1c>
    13e8:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_pscB>
    13ec:	20 f0       	brcs	.+8      	; 0x13f6 <__mulsf3+0x1c>
    13ee:	95 23       	and	r25, r21
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <__mulsf3+0x1c>
    13f2:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_inf>
    13f6:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_nan>
    13fa:	11 24       	eor	r1, r1
    13fc:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>

00001400 <__mulsf3x>:
    1400:	0e 94 b7 09 	call	0x136e	; 0x136e <__fp_split3>
    1404:	70 f3       	brcs	.-36     	; 0x13e2 <__mulsf3+0x8>

00001406 <__mulsf3_pse>:
    1406:	95 9f       	mul	r25, r21
    1408:	c1 f3       	breq	.-16     	; 0x13fa <__mulsf3+0x20>
    140a:	95 0f       	add	r25, r21
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	55 1f       	adc	r21, r21
    1410:	62 9f       	mul	r22, r18
    1412:	f0 01       	movw	r30, r0
    1414:	72 9f       	mul	r23, r18
    1416:	bb 27       	eor	r27, r27
    1418:	f0 0d       	add	r31, r0
    141a:	b1 1d       	adc	r27, r1
    141c:	63 9f       	mul	r22, r19
    141e:	aa 27       	eor	r26, r26
    1420:	f0 0d       	add	r31, r0
    1422:	b1 1d       	adc	r27, r1
    1424:	aa 1f       	adc	r26, r26
    1426:	64 9f       	mul	r22, r20
    1428:	66 27       	eor	r22, r22
    142a:	b0 0d       	add	r27, r0
    142c:	a1 1d       	adc	r26, r1
    142e:	66 1f       	adc	r22, r22
    1430:	82 9f       	mul	r24, r18
    1432:	22 27       	eor	r18, r18
    1434:	b0 0d       	add	r27, r0
    1436:	a1 1d       	adc	r26, r1
    1438:	62 1f       	adc	r22, r18
    143a:	73 9f       	mul	r23, r19
    143c:	b0 0d       	add	r27, r0
    143e:	a1 1d       	adc	r26, r1
    1440:	62 1f       	adc	r22, r18
    1442:	83 9f       	mul	r24, r19
    1444:	a0 0d       	add	r26, r0
    1446:	61 1d       	adc	r22, r1
    1448:	22 1f       	adc	r18, r18
    144a:	74 9f       	mul	r23, r20
    144c:	33 27       	eor	r19, r19
    144e:	a0 0d       	add	r26, r0
    1450:	61 1d       	adc	r22, r1
    1452:	23 1f       	adc	r18, r19
    1454:	84 9f       	mul	r24, r20
    1456:	60 0d       	add	r22, r0
    1458:	21 1d       	adc	r18, r1
    145a:	82 2f       	mov	r24, r18
    145c:	76 2f       	mov	r23, r22
    145e:	6a 2f       	mov	r22, r26
    1460:	11 24       	eor	r1, r1
    1462:	9f 57       	subi	r25, 0x7F	; 127
    1464:	50 40       	sbci	r21, 0x00	; 0
    1466:	9a f0       	brmi	.+38     	; 0x148e <__mulsf3_pse+0x88>
    1468:	f1 f0       	breq	.+60     	; 0x14a6 <__mulsf3_pse+0xa0>
    146a:	88 23       	and	r24, r24
    146c:	4a f0       	brmi	.+18     	; 0x1480 <__mulsf3_pse+0x7a>
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	bb 1f       	adc	r27, r27
    1474:	66 1f       	adc	r22, r22
    1476:	77 1f       	adc	r23, r23
    1478:	88 1f       	adc	r24, r24
    147a:	91 50       	subi	r25, 0x01	; 1
    147c:	50 40       	sbci	r21, 0x00	; 0
    147e:	a9 f7       	brne	.-22     	; 0x146a <__mulsf3_pse+0x64>
    1480:	9e 3f       	cpi	r25, 0xFE	; 254
    1482:	51 05       	cpc	r21, r1
    1484:	80 f0       	brcs	.+32     	; 0x14a6 <__mulsf3_pse+0xa0>
    1486:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_inf>
    148a:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>
    148e:	5f 3f       	cpi	r21, 0xFF	; 255
    1490:	e4 f3       	brlt	.-8      	; 0x148a <__mulsf3_pse+0x84>
    1492:	98 3e       	cpi	r25, 0xE8	; 232
    1494:	d4 f3       	brlt	.-12     	; 0x148a <__mulsf3_pse+0x84>
    1496:	86 95       	lsr	r24
    1498:	77 95       	ror	r23
    149a:	67 95       	ror	r22
    149c:	b7 95       	ror	r27
    149e:	f7 95       	ror	r31
    14a0:	e7 95       	ror	r30
    14a2:	9f 5f       	subi	r25, 0xFF	; 255
    14a4:	c1 f7       	brne	.-16     	; 0x1496 <__mulsf3_pse+0x90>
    14a6:	fe 2b       	or	r31, r30
    14a8:	88 0f       	add	r24, r24
    14aa:	91 1d       	adc	r25, r1
    14ac:	96 95       	lsr	r25
    14ae:	87 95       	ror	r24
    14b0:	97 f9       	bld	r25, 7
    14b2:	08 95       	ret

000014b4 <square>:
    14b4:	9b 01       	movw	r18, r22
    14b6:	ac 01       	movw	r20, r24
    14b8:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__mulsf3>

000014bc <__divmodhi4>:
    14bc:	97 fb       	bst	r25, 7
    14be:	07 2e       	mov	r0, r23
    14c0:	16 f4       	brtc	.+4      	; 0x14c6 <__divmodhi4+0xa>
    14c2:	00 94       	com	r0
    14c4:	07 d0       	rcall	.+14     	; 0x14d4 <__divmodhi4_neg1>
    14c6:	77 fd       	sbrc	r23, 7
    14c8:	09 d0       	rcall	.+18     	; 0x14dc <__divmodhi4_neg2>
    14ca:	0e 94 87 0a 	call	0x150e	; 0x150e <__udivmodhi4>
    14ce:	07 fc       	sbrc	r0, 7
    14d0:	05 d0       	rcall	.+10     	; 0x14dc <__divmodhi4_neg2>
    14d2:	3e f4       	brtc	.+14     	; 0x14e2 <__divmodhi4_exit>

000014d4 <__divmodhi4_neg1>:
    14d4:	90 95       	com	r25
    14d6:	81 95       	neg	r24
    14d8:	9f 4f       	sbci	r25, 0xFF	; 255
    14da:	08 95       	ret

000014dc <__divmodhi4_neg2>:
    14dc:	70 95       	com	r23
    14de:	61 95       	neg	r22
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255

000014e2 <__divmodhi4_exit>:
    14e2:	08 95       	ret

000014e4 <__tablejump2__>:
    14e4:	ee 0f       	add	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	05 90       	lpm	r0, Z+
    14ea:	f4 91       	lpm	r31, Z
    14ec:	e0 2d       	mov	r30, r0
    14ee:	09 94       	ijmp

000014f0 <__umulhisi3>:
    14f0:	a2 9f       	mul	r26, r18
    14f2:	b0 01       	movw	r22, r0
    14f4:	b3 9f       	mul	r27, r19
    14f6:	c0 01       	movw	r24, r0
    14f8:	a3 9f       	mul	r26, r19
    14fa:	70 0d       	add	r23, r0
    14fc:	81 1d       	adc	r24, r1
    14fe:	11 24       	eor	r1, r1
    1500:	91 1d       	adc	r25, r1
    1502:	b2 9f       	mul	r27, r18
    1504:	70 0d       	add	r23, r0
    1506:	81 1d       	adc	r24, r1
    1508:	11 24       	eor	r1, r1
    150a:	91 1d       	adc	r25, r1
    150c:	08 95       	ret

0000150e <__udivmodhi4>:
    150e:	aa 1b       	sub	r26, r26
    1510:	bb 1b       	sub	r27, r27
    1512:	51 e1       	ldi	r21, 0x11	; 17
    1514:	07 c0       	rjmp	.+14     	; 0x1524 <__udivmodhi4_ep>

00001516 <__udivmodhi4_loop>:
    1516:	aa 1f       	adc	r26, r26
    1518:	bb 1f       	adc	r27, r27
    151a:	a6 17       	cp	r26, r22
    151c:	b7 07       	cpc	r27, r23
    151e:	10 f0       	brcs	.+4      	; 0x1524 <__udivmodhi4_ep>
    1520:	a6 1b       	sub	r26, r22
    1522:	b7 0b       	sbc	r27, r23

00001524 <__udivmodhi4_ep>:
    1524:	88 1f       	adc	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	5a 95       	dec	r21
    152a:	a9 f7       	brne	.-22     	; 0x1516 <__udivmodhi4_loop>
    152c:	80 95       	com	r24
    152e:	90 95       	com	r25
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	08 95       	ret

00001536 <_exit>:
    1536:	f8 94       	cli

00001538 <__stop_program>:
    1538:	ff cf       	rjmp	.-2      	; 0x1538 <__stop_program>
